header = add_headers('X-Naver-Client-Id' = client_id,'X-Naver-Client-Secret'
url = paste0("https://openapi.naver.com/v1/voice/tts.bin")
library(tuneR)
header = add_headers('X-Naver-Client-Id' = client_id,'X-Naver-Client-Secret' = client_secret)
url = paste0("https://openapi.naver.com/v1/voice/tts.bin")
speech = 'jinho'
encText = "�덈뀞�섏꽭��"
data = list(speaker = speech,
speed = 0,
text = encText)
url_post = POST(url,header, body = data, encode = 'form', write_disk('test.mp3',overwrite = T))
mp3 = readMP3('test.mp3')
play(mp3)
rm(list=ls())
MASS::mvrnorm()
MASS::mvrnorm(0,)
MASS::mvrnorm(mu = 0,)
MASS::mvrnorm(mu = 0, sigma())
Precision_matrix = matrix(c(1,0,.5,0,10.3,.5,.3,1), byrow = T, nrow=3)
Precision_matrix = matrix(c(1,0,.5,0,10,.3,.5,.3,1), byrow = T, nrow=3)
library(MASS)
Precision_matrix
Precision_matrix = matrix(c(1,0,.5,0,1,.3,.5,.3,1), byrow = T, nrow=3)
Cov_matrix = solve(Precision_matrix)
n = 100
pcor.vec <- rep(0,1000)
n = 100
pcor.vec <- rep(0,1000)
for ( i in 1:1000)
{
rdata<-mvrnorm(n,mu = rep(0,3), Sigma)
x = rdata[,1]
y = rdata[,2]
z = rdata[,3]
x = x-mean(x)
y = y-mean(y)
z = z-mean(z)
pcor.vec[i]<-cor(lm(x~z-1)$residual,lm(y~z-1)$residual)
}
n = 100
pcor.vec <- rep(0,1000)
for ( i in 1:1000)
{
rdata<-mvrnorm(n,mu = rep(0,3), Cov_matrix)
x = rdata[,1]
y = rdata[,2]
z = rdata[,3]
x = x-mean(x)
y = y-mean(y)
z = z-mean(z)
pcor.vec[i]<-cor(lm(x~z-1)$residual,lm(y~z-1)$residual)
}
boxplot(pcor.vec)
table(cor(lm(x~z-1)$residual,lm(y~z-1)$residual), cor(x,y))
cor(lm(x~z-1)$residual,lm(y~z-1)$residual)
cor(x,y)
table(cor(lm(x~z-1)$residual,lm(y~z-1)$residual), cor(x,y))
c(cor(lm(x~z-1)$residual,lm(y~z-1)$residual), cor(x,y))
set.seed(1)
y = runif(100)
x = matrix(runif(500,100,5))
x
set.seed(1)
y = runif(100)
x = matrix(runif(500),100,5)
x
x[,1]*1+x[,2]*0.5-x[,3]*2+x[,4]*3-x[,5]*0.1
(solve(t(x)%*%x))
y_hat = x%*%solve(t(x)%*%x)%*%t(x)%*%y
solve(t(x)%*%x)%*%t(x)%*%y
B_hat = solve(t(x)%*%x)%*%t(x)%*%y
lm(y~x[,1]+x[,2]+x[,3]+x[,4]+x[,5])
lm(y~x[,1]+x[,2]+x[,3]+x[,4]+x[,5]-1)
B_hat = solve(t(x)%*%x)%*%t(x)%*%y
lm(y~x[,1]+x[,2]+x[,3]+x[,4]+x[,5]-1)
lm(y~x[,1]+x[,2]+x[,3]+x[,4]+x[,5]-1)
B_hat
#Classification Tree
library(tree)
#install.packages("ISLR")
library(ISLR)
attach(Carseats)
head(Carseats)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
head(Carseats)
tree.carseats=tree(High~.-Sales,Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty=0)
tree.carseats
rm(list=ls())
head(Carseats)
High=ifelse(Sales<=8,"No","Yes")
attach(Carseats)
Carseats=data.frame(Carseats,High)
Carseats
tree.carseats=tree(High~.-Sales,Carseats)
tree.carseats
summary(tree.carseats)
library(xlsx)
library(rgl)
library(dplyr)
library(glmnet)
Sys.setlocale(,'English')
mailorder = read.xlsx2('d:/github/r/database_marketing/hw2/mailorder.xls', 1)
## Factor > numericd
mailorder$monetary = as.numeric(as.character(mailorder$monetary)) #총 지출액
mailorder$recency = as.numeric(as.character(mailorder$recency)) #최근 구매
mailorder$transaction = as.numeric(as.character(mailorder$frequency)) #총 구매 건수
mailorder$duration = as.numeric(as.character(mailorder$duration)) #첫 구매
mailorder$purchase = as.numeric(as.character(mailorder$purchase)) #메일구매여부
mailorder = mailorder[,c(-1,-5)]
test_group1 = mailorder[1:2000,]
valid_group1 = mailorder[2001:4000,]
summary(mailorder)
tree(purchase~.,test_group1)
summary(tree(purchase~.,test_group1))
text(tree.carseats, pretty=0)
plot(tree.carseats)
tree.carseats
rm(list=ls())
head(Carseats)
High=ifelse(Sales<=8,"No","Yes")
Carseats=data.frame(Carseats,High)
head(Carseats)
tree.carseats=tree(High~.-Sales,Carseats)
summary(tree.carseats)
plot(tree.carseats)
text(tree.carseats, pretty=0)
tree.carseats
plot(tree.carseats)
text(tree.carseats, pretty=0)
plot(tree.carseats)
text(tree.carseats, pretty=0)
tree.carseats
set.seed(2)
train=sample(1:nrow(Carseats), 200)
Carseats.test=Carseats[-train,]
High.test=High[-train]
tree.carseats=tree(High~.-Sales,Carseats,subset=train)
tree.pred=predict(tree.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(86+57)/200
tree.carseats
table(tree.pred,High.test)
(86+57)/200
cv.tree(tree.carseats,FUN=prune.misclass)
cv.carseats
set.seed(3)
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
names(cv.carseats)
cv.carseats
par(mfrow=c(1,2))
plot(cv.carseats$size,cv.carseats$dev,type="b")
plot(cv.carseats$k,cv.carseats$dev,type="b")
set.seed(3)
cv.carseats=cv.tree(tree.carseats,FUN=prune.misclass)
names(cv.carseats)
cv.carseats
# $dev는 아래 그래프에서 확인 + 최저값 사용
par(mfrow=c(1,2))
plot(cv.carseats$size,cv.carseats$dev,type="b")
plot(cv.carseats$k,cv.carseats$dev,type="b")
prune.carseats=prune.misclass(tree.carseats,best=9)
plot(prune.carseats)
text(prune.carseats,pretty=0)
tree.pred=predict(prune.carseats,Carseats.test,type="class")
table(tree.pred,High.test)
(94+60)/200
prune.carseats
(94+60)/200
?cv.tree
cv.carseats
plot(cv.carseats$size,cv.carseats$dev,type="b")
plot(cv.carseats$k,cv.carseats$dev,type="b")
par(mfrow=c(1,2))
plot(cv.carseats$size,cv.carseats$dev,type="b")
plot(cv.carseats$k,cv.carseats$dev,type="b")
rm(list=ls())
dev.off()
gc()
library(MASS)
attach(Boston)
head(Boston)
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
tree.boston=tree(medv~.,Boston,subset=train)
summary(tree.boston)
plot(tree.boston)
text(tree.boston,pretty=0)
cv.boston=cv.tree(tree.boston)
plot(cv.boston$size,cv.boston$dev,type='b')
prune.boston=prune.tree(tree.boston,best=5)
plot(prune.boston)
text(prune.boston,pretty=0)
yhat=predict(tree.boston,newdata=Boston[-train,])
boston.test=Boston[-train,"medv"]
plot(yhat,boston.test)
abline(0,1)
prune.boston
prune.boston=prune.tree(tree.boston,best=7)
plot(prune.boston)
text(prune.boston,pretty=0)
prune.boston
prune.boston=prune.tree(tree.boston,best=5)
plot(prune.boston)
text(prune.boston,pretty=0)
prune.boston
yhat=predict(prune.boston,newdata=Boston[-train,])
boston.test=Boston[-train,"medv"]
plot(yhat,boston.test)
abline(0,1)
yhat=predict(tree.boston,newdata=Boston[-train,])
boston.test=Boston[-train,"medv"]
plot(yhat,boston.test)
abline(0,1)
yhat=predict(prune.boston,newdata=Boston[-train,])
boston.test=Boston[-train,"medv"]
plot(yhat,boston.test)
abline(0,1)
rm(list=ls())
gc()
dev.off()
library(randomForest)
install.packages('randomFrest')
install.packages('randomForest')
library(randomForest)
set.seed(1)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry=13,importance=TRUE)
library(randomForest)
library(ISLR)
attach(Boston)
set.seed(1)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry=13,importance=TRUE)
library(randomForest)
library(ISLR)
attach(Boston)
set.seed(1)
train = sample(1:nrow(Boston), nrow(Boston)/2)
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry=13,importance=TRUE)
bag.boston
plot(tree.boston)
yhat.bag = predict(bag.boston,newdata=Boston[-train,])
plot(yhat.bag, boston.test)
boston.test=Boston[-train,"medv"]
yhat.bag = predict(bag.boston,newdata=Boston[-train,])
plot(yhat.bag, boston.test)
abline(0,1)
mean((yhat-boston.test)^2)
yhat=predict(tree.boston,newdata=Boston[-train,])
bag.boston=randomForest(medv~.,data=Boston,subset=train,mtry=13,ntree=25)
yhat.bag = predict(bag.boston,newdata=Boston[-train,])
mean((yhat.bag-boston.test)^2)
set.seed(1)
rf.boston=randomForest(medv~.,data=Boston,subset=train,mtry=6,importance=TRUE)
yhat.rf = predict(rf.boston,newdata=Boston[-train,])
mean((yhat.rf-boston.test)^2)
importance(rf.boston)
varImpPlot(rf.boston)
set.seed(1)
x=matrix(rnorm(20*2), ncol=2)
y=c(rep(-1,10), rep(1,10))
x[y==1,]=x[y==1,] + 1
plot(x, col=(3-y))
plot(x, col=(3-y), pch = 19)
x
dat=data.frame(x=x, y=as.factor(y))
library(e1071)
svmfit=svm(y~., data=dat, kernel="linear", cost=10,scale=FALSE)
plot(svmfit, dat)
?svm
dat=data.frame(x=x, y=as.factor(y))
library(e1071)
svmfit=svm(y~., data=dat, kernel="polynomial", cost=10,scale=FALSE)
plot(svmfit, dat)
dat=data.frame(x=x, y=as.factor(y))
library(e1071)
svmfit=svm(y~., data=dat, kernel="polynomial", cost=1, scale=FALSE)
plot(svmfit, dat)
svmfit=svm(y~., data=dat, kernel="polynomial", cost=10, scale=FALSE)
plot(svmfit, dat)
svmfit=svm(y~., data=dat, kernel="linear", cost=10, scale=FALSE)
plot(svmfit, dat)
svmfit=svm(y~., data=dat, kernel="linear", cost=20, scale=FALSE)
plot(svmfit, dat)
plot(x[,2],x[,1], col=(3-y), pch = 19)
svmfit=svm(y~., data=dat, kernel="linear", cost=10, scale=FALSE)
plot(svmfit, dat)
summary(svmfit)
svmfit=svm(y~., data=dat, kernel="linear", cost=0.1,scale=FALSE)
plot(svmfit, dat)
set.seed(1)
tune.out=tune(svm,y~.,data=dat,kernel="linear",ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))
summary(tune.out)
unclass(summary(tune.out))
set.seed(1)
tune.out=tune(svm,y~.,data=dat,kernel="linear",ranges=list(cost=c(0.001, 0.01, 0.1, 1,5,10,100)))
summary(tune.out)
bestmod=tune.out$best.model
summary(bestmod)
xtest=matrix(rnorm(20*2), ncol=2)
ytest=sample(c(-1,1), 20, rep=TRUE)
xtest[ytest==1,]=xtest[ytest==1,] + 1
testdat=data.frame(x=xtest, y=as.factor(ytest))
ypred=predict(bestmod,testdat)
table(predict=ypred, truth=testdat$y)
svmfit=svm(y~., data=dat, kernel="linear", cost=.01,scale=FALSE)
ypred=predict(svmfit,testdat)
table(predict=ypred, truth=testdat$y)
x[y==1,]=x[y==1,]+0.5
plot(x, col=(y+5)/2, pch=19)
xtest=matrix(rnorm(20*2), ncol=2)
ytest=sample(c(-1,1), 20, rep=TRUE)
xtest[ytest==1,]=xtest[ytest==1,] + 1
testdat=data.frame(x=xtest, y=as.factor(ytest))
ypred=predict(bestmod,testdat)
table(predict=ypred, truth=testdat$y)
svmfit=svm(y~., data=dat, kernel="linear", cost=.01,scale=FALSE)
ypred=predict(svmfit,testdat)
table(predict=ypred, truth=testdat$y)
x[y==1,]=x[y==1,]+0.5
plot(x, col=(y+5)/2, pch=19)
dat=data.frame(x=x,y=as.factor(y))
svmfit=svm(y~., data=dat, kernel="linear", cost=1e5)
summary(svmfit)
plot(svmfit, dat)
svmfit=svm(y~., data=dat, kernel="linear", cost=1)
summary(svmfit)
set.seed(1)
x=matrix(rnorm(200*2), ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x, col=y)
set.seed(1)
x=matrix(rnorm(200*2), ncol=2)
x[1:100,]=x[1:100,]+2
x[101:150,]=x[101:150,]-2
y=c(rep(1,150),rep(2,50))
dat=data.frame(x=x,y=as.factor(y))
plot(x[,2],x[,1], col=y)
train=sample(200,100)
svmfit=svm(y~., data=dat[train,], kernel="radial", gamma=1, cost=1)
plot(svmfit, dat[train,])
svmfit=svm(y~., data=dat[train,], kernel="radial",gamma=1,cost=1e5)
plot(svmfit,dat[train,])
tune.out=tune(svm, y~., data=dat[train,], kernel="radial", ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4))
summary(tune.out)
tune.out=tune(svm, y~., data=dat[train,], kernel="radial", ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4)))
tune.out=tune(svm, y~., data=dat[train,], kernel="radial", ranges=list(cost=c(0.1,1,10,100,1000),gamma=c(0.5,1,2,3,4)))
summary(tune.out)
table(true=dat[-train,"y"], pred=predict(tune.out$best.model,newx=dat[-train,]))
library(ROCR)
install.packages('ROCR')
library(ROCR)
rocplot=function(pred, truth, ...)f
predob = prediction(pred, truth)
set.seed(1)
x=rbind(x, matrix(rnorm(50*2), ncol=2))
y=c(y, rep(0,50))
x[y==0,2]=x[y==0,2]+2
dat=data.frame(x=x, y=as.factor(y))
par(mfrow=c(1,1))
set.seed(1)
x=rbind(x, matrix(rnorm(50*2), ncol=2))
y=c(y, rep(0,50))
x[y==0,2]=x[y==0,2]+2
dat=data.frame(x=x, y=as.factor(y))
par(mfrow=c(1,1))
plot(x,col=(y+1))
svmfit=svm(y~., data=dat, kernel="radial", cost=10, gamma=1)
plot(svmfit, dat)
rm(list=ls()
)
y_vec = rnorm(100)
y_vec = rnorm(100)
one_vec = rep(1,100)
Y_vec = matrix(Y_vec, nrow=100)
y_vec = matrix(y_vec, nrow=100)
y_vec
one_vec = matrix(one_vec, nrow=100)
one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)*y_vec
solve(t(one_vec)%*%one_vec)
one_vec%*%solve(t(one_vec)%*%one_vec)
one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)
one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%y_vec
mean(y_vec)
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%y_vec
y_vec - y_sol
y_res = y_vec - y_sol
mean(y_res)
y_res = y_vec - y_sol
mean(y_res)
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)
y_res = y_vec - y_sol
mean(y_res)
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%y
y_vec = rnorm(100)
one_vec = rep(1,100)
y_vec = matrix(y_vec, nrow=100)
one_vec = matrix(one_vec, nrow=100)
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%y
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%y_vec
mean(y_vec)
y_res = y_vec - y_sol
mean(y_res)
y_vec = rnorm(100)
one_vec = rep(1,100)
y_vec = matrix(y_vec, nrow=100)
one_vec = matrix(one_vec, nrow=100)
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec) * y_vec
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%y_vec
mean(y_vec)
y_res = y_vec - y_sol
mean(y_res)
y_vec = rnorm(100)
one_vec = rep(1,100)
y_vec = matrix(y_vec, nrow=100)
one_vec = matrix(one_vec, nrow=100)
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%one_vec
mean(y_vec)
y_res = y_vec - y_sol
mean(y_res)
y_vec = rnorm(100)
one_vec = rep(1,100)
y_vec = matrix(y_vec, nrow=100)
one_vec = matrix(one_vec, nrow=100)
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%y_vec
y_sol[1]
mean(y_vec)
y_res = y_vec - y_sol%*%one_vec
y_res = y_vec - y_sol
mean(y_res)
y_vec = rnorm(100)
one_vec = rep(1,100)
y_vec = matrix(y_vec, nrow=100)
one_vec = matrix(one_vec, nrow=100)
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%y_vec
y_sol[1]
mean(y_vec)
y_res = y_vec - y_sol
mean(y_res)
y_vec = rnorm(100)
one_vec = rep(1,100)
y_vec = matrix(y_vec, nrow=100)
one_vec = matrix(one_vec, nrow=100)
y_sol = one_vec%*%solve(t(one_vec)%*%one_vec)%*%t(one_vec)%*%y_vec
y_sol[1]
mean(y_vec)
y_res = y_vec - y_sol
mean(y_res)
rm(list=ls())
gc()
dev.off()
dev.off()
boxplot(pcor.vec)
library(MASS)
Omega  = matrix(c(1,0,0.5,
0,1,0.3,
0.5,0.3,1)
,3,3)
Sigma <- solve(Omega)
n = 100
pcor.vec <- rep(0,1000)
for ( i in 1:1000)
{
rdata<-mvrnorm(n,mu = rep(0,3), Sigma)
x = rdata[,1]
y = rdata[,2]
z = rdata[,3]
x = x-mean(x)
y = y-mean(y)
z = z-mean(z)
pcor.vec[i]<-cor(lm(x~z-1)$residual,lm(y~z-1)$residual)
}
boxplot(pcor.vec)
install.packages("igraph")
Sigma  = matrix(c(1,0,0.5,0,
0,1,0.3,0.2,
0.5,0.3,1,0,
0,0.2,0,1)
,4,4)
Sigma11<- Sigma[1:2,1:2]
Sigma12<- Sigma[1:2,3:4]
Sigma21<- Sigma[3:4,1:2]
Sigma22<- Sigma[3:4,3:4]
tmp<-Sigma11 - Sigma12%*%solve(Sigma22)%*%Sigma21
tmp
install.packages('glasso')
library(glasso)
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
a<-glasso(s, rho=.01)
aa<-glasso(s,rho=.02, w.init=a$w, wi.init=a$wi)
aa$wi
image(aa$wi)
a$w
install.packages('arulesViz')
rm(list=ls())
library(dplyr)
library(arulesViz)
install.packages('mclust')
library(dplyr)
library(arulesViz)
data("Groceries")
head(Groceries)
str(Groceries)
summary(Groceries)
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
max(Groceries@data@i)
