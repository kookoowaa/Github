attach(Auto)
plot(mpg, horsepower)
abline(a = as.numeric(autolm$coefficients[1]), b = as.numeric(autolm$coefficients[2]))
library(ISLR)
head(Auto)
Auto = na.omit(Auto)
autolm = lm(mpg~horsepower, data = Auto)
summary(autolm)
predict(autolm, newdata = data.frame(horsepower=98), interval = 'confidence', level = 0.9)
attach(Auto)
plot(mpg, horsepower)
abline(a = as.numeric(autolm$coefficients[1]), b = as.numeric(autolm$coefficients[2]))
library(ISLR)
head(Auto)
Auto = na.omit(Auto)
autolm = lm(mpg~horsepower, data = Auto)
summary(autolm)
predict(autolm, newdata = data.frame(horsepower=98), interval = 'confidence', level = 0.9)
attach(Auto)
plot(mpg, horsepower)
abline(a = as.numeric(autolm$coefficients[1]), b = as.numeric(autolm$coefficients[2]))
abline(39.9, -0.15)
library(ISLR)
head(Auto)
Auto = na.omit(Auto)
autolm = lm(mpg~horsepower, data = Auto)
summary(autolm)
predict(autolm, newdata = data.frame(horsepower=98), interval = 'confidence', level = 0.9)
attach(Auto)
plot(mpg, horsepower)
#abline(a = as.numeric(autolm$coefficients[1]), b = as.numeric(autolm$coefficients[2]))
#abline(39.9, -0.15)
library(ISLR)
head(Auto)
Auto = na.omit(Auto)
autolm = lm(mpg~horsepower, data = Auto)
summary(autolm)
predict(autolm, newdata = data.frame(horsepower=98), interval = 'confidence', level = 0.9)
attach(Auto)
plot(horsepower, mpg)
#abline(a = as.numeric(autolm$coefficients[1]), b = as.numeric(autolm$coefficients[2]))
#abline(39.9, -0.15)
abline(a = as.numeric(autolm$coefficients[1]), b = as.numeric(autolm$coefficients[2]))
library(ISLR)
head(Auto)
Auto = na.omit(Auto)
autolm = lm(mpg~horsepower, data = Auto)
summary(autolm)
predict(autolm, newdata = data.frame(horsepower=98), interval = 'confidence', level = 0.9)
attach(Auto)
plot(horsepower, mpg)
abline(a = as.numeric(autolm$coefficients[1]), b = as.numeric(autolm$coefficients[2]))
#abline(39.9, -0.15)
plot(summary(autolm))
library(ISLR)
head(Auto)
Auto = na.omit(Auto)
autolm = lm(mpg~horsepower, data = Auto)
summary(autolm)
predict(autolm, newdata = data.frame(horsepower=98), interval = 'confidence', level = 0.9)
attach(Auto)
plot(horsepower, mpg)
abline(a = as.numeric(autolm$coefficients[1]), b = as.numeric(autolm$coefficients[2]))
plot(summary(autolm))
plot(autolm)
# applied (2)
auto_multi_lm = lm(mpg~.-name, data = Auto)
summary(auto_multi_lm)
summary(lm(mpg~cylinders*displacement, data = Auto))
summary(lm(mpg~cylinders:displacement, data = Auto))
summary(lm(mpg~cylinders:displacement+ displacement:weight, data = Auto))
Carseats
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
set.seed(1)
x1 = 1:10
x2 = rnorm(10)
cor(x1,x2)
set.seed(1)
x1 = 1:10
x2 = rnorm(10)
cor(x1,x2)
cor(x1,exp(x2))
set.seed(1)
x1 = 1:10
x2 = rnorm(10)
cor(x1,x2)
cor(x1,exp(x2), method = kendal)
set.seed(1)
x1 = 1:10
x2 = rnorm(10)
cor(x1,x2)
cor(x1,exp(x2), method = 'kendal')
set.seed(1)
x1 = 1:10
x2 = rnorm(10)
cor(x1,x2)
cor(x1,exp(x2), method = 'kendal')
set.seed(1)
x1 = 1:10
x2 = rnorm(10)
cor(x1,x2)
cor(x1,exp(x2), method = 'kendal')
set.seed(1)
x1 = 1:10
x2 = rnorm(10)
cor(x1,x2, method = 'kendall')
cor(x1,exp(x2), method = 'kendall')
stripchart <- ggplot(msleep, aes(x = vore, y = sleep_total, col = vore))+
geom_jitter(position = position_jitter(width = 0.2), size = 5, alpha = 0.5)
library(ggplot2)
stripchart <- ggplot(msleep, aes(x = vore, y = sleep_total, col = vore))+
geom_jitter(position = position_jitter(width = 0.2), size = 5, alpha = 0.5)
stripchart
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 1)+
geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 2)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 5)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = )+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 1)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 1)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 4)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 9)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 2)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 3)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 2)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 1)+ geom_point(size=3)
data(economics)
data("presidential")
ggplot(economics, aes(date, unemploy)) + geom_line()
ggplot(economics) + geom_rect(aes(xmin = start,xmax = end, fill = party))
ggplot(economics) + geom_rect(aes(xmin = start,xmax = end, fill = party, ymin = -Inf, ymax = Inf, data = presidential) + geom_line(aes(date, unemploy), data = economics)
ggplot(economics) + geom_rect(aes(xmin = start,xmax = end, fill = party, ymin = -Inf, ymax = Inf, data = presidential)) + geom_line(aes(date, unemploy), data = economics)
head(presidentail)
head(presidental)
head(presidential)
ggplot(economics) + geom_rect(aes(xmin = start,xmax = end, fill = party), ymin = -Inf, ymax = Inf, data = presidential) + geom_line(aes(date, unemploy), data = economics)
presidential = subset(presidential, start > economics$date[1])
ggplot(economics) + geom_rect(aes(xmin = start, xmax = end, fill = party), ymin = -Inf, ymax = Inf, data = presidential) + geom_line(aes(date, unemploy), data = economics)
ggplot(economics) + geom_rect(aes(xmin = start, xmax = end, fill = party), ymin = -Inf, ymax = Inf, data = presidential) + geom_line(aes(date, unemploy), data = economics)
ggplot(economics) + geom_rect(aes(xmin = start, xmax = end, fill = party), ymin = -Inf, ymax = Inf, data = presidential)
presidential = subset(presidential, start > economics$date[1])
ggplot(economics) + geom_rect(aes(xmin = start, xmax = end, fill = party), ymin = -Inf, ymax = Inf, data = presidential) + geom_line(aes(date, unemploy), data = economics)
library(datasets)
data("airquality")
plot(airquality, type = 'l')
library(datasets)
data("airquality")
plot(airquality$Ozone, type = 'l')
aq_trim = airquality[which(airquality$Month == 7 | airquality$Month == 8 | airquality$Month ==9),]
aq_trim$
aq_trim = airquality[which(airquality$Month == 7 | airquality$Month == 8 | airquality$Month ==9),]
aq_trim$Month = aq_trim$Month <- factor(aq_trim$Month,labels = c("July", "August", "September"))
geom_line
ggplot(aq_trim, aes(x = Day, y = Ozone, size = Wind, fill = Temp)) +
geom_point(shape = 21) +   ggtitle("Air Quality in New York by Day") +
labs(x = "Day of the month", y = "Ozone (ppb)") +
scale_x_continuous(breaks = seq(1, 31, 5))
festival.data = read.table(file = 'downloadfestival.dat', sep = '\t', header = T)
festival.data = read.table(file = './data/wk6/downloadfestival.dat', sep = '\t', header = T)
head(festival.data)
festival.data = read.table(file = './data/wk6/downloadfestival.dat', sep = '\t', header = T)
head(festival.data)
Day1Histogram = ggplot(data = festival.data, aes(x = day1))
festival.data = read.table(file = './data/wk6/downloadfestival.dat', sep = '\t', header = T)
head(festival.data)
Day1Histogram = ggplot(data = festival.data, aes(x = day1))
Day1Histogram
festival.data = read.table(file = './data/wk6/downloadfestival.dat', sep = '\t', header = T)
head(festival.data)
Day1Histogram = ggplot(data = festival.data, aes(x = day1))
Day1Histogram + geom_histogram()
Day1Histogram + geom_histogram(color = 'royalblue1', fill = 'royalblue2')
Day1Histogram +geom_histogram(color = 'royalblue1', fill = 'royalblue2', binwidth = 0.1)
Day1Histogram +geom_histogram(color = 'royalblue1', fill = 'royalblue2', binwidth = 0.3)
Day1Histogram +geom_histogram(color = 'royalblue1', fill = 'royalblue2', bins = 30)
Day1Histogram +geom_histogram(color = 'royalblue1', fill = 'royalblue2', binwidth = 0.1)
Day1Histogram + geom_histogram(binwidth = 0.2, aes(y = ..density..), color = 'royalblue1', fill = 'yellow')
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 1)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = 9)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = c(1,2,3,4))+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = c(1,1,2))+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = c(1,1,2,2))+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group = c(1,2,1,2))+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line()+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group=1)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group=c(2,1))+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group=c(2,1,3,2))+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group=1)+ geom_point(size=3)
dane <- data.frame(mylevels=c(1,2,5,9), myvalues=c(2, 5, 3, 4))
dane
ggplot(dane, aes(x=factor(mylevels), y=myvalues)) + geom_line(group=c(1,1,3,1))+ geom_point(size=3)
Day1Histogram + geom_histogram(binwidth = 0.2, aes(y = ..density..), color = 'black', fill = 'lightblue') + geom_density(alpha = 0.2, fill = '#FF6666')
Day1Histogram + geom_histogram(binwidth = 0.1, aes(y = ..density..), color = 'black', fill = 'lightblue') + geom_density(alpha = 0.2, fill = '#FF6666')
festival.data.stack = melt(festical.data, id = c('thicknumb', 'gender'))
library(reshape2)
festival.data.stack = melt(festical.data, id = c('thicknumb', 'gender'))
library(reshape2)
festival.data.stack = melt(festival.data, id = c('thicknumb', 'gender'))
library(reshape2)
festival.data.stack = melt(festival.data, id = c('ticknumb', 'gender'))
colnames (festival.data.stack)[3:4] = c('day','score')
festival.data.stack
festival.data
festival.data.stack
library(dplyr)
festival.data.stack %>% arrange(day, ticknumb)
library(dplyr)
festival.data.stack %>% arrange(ticknumb, day)
Histogram.3day2 = ggplot(data = festival.data.stack, aes( x = score)) + geom_histogram(binwidth = 0.4, color = 'black', fill = 'yellow') + labs( x = 'score', y = 'counts')
Histogram.3day2
Histogram.3day2 + facet_grid(~gendere)
Histogram.3day2 + facet_grid(~gender)
Histogram.3day2 + facet_grid(gender~day)
Histogram.3day3 = ggplot(data = festival.data.stack, aes( x = score, y =..density..)) + geom_histogram(binwidth = 0.4, color = 'black', fill = 'yellow') + labs( x = 'score', y = 'counts')
Histogram.3day3
Histogram.3day3 = ggplot(data = festival.data.stack, aes( x = score, y =..density..)) + geom_histogram(binwidth = 0.4, color = 'black', fill = 'yellow') + labs( x = 'score', y = 'density')
Histogram.3day3
Histogram.3day3 + facet_grid(~gender)
Histogram.3day3 + facet_grid(gender~day)
scatterplot_fest = ggplot ( data = festival.data.stack, aes(x = gender, y = score, fill = gender))+ geom_point(position = 'jitter') + facet_grid(~day)
scatterplot_fest = ggplot ( data = festival.data.stack, aes(x = gender, y = score, fill = gender))+ geom_point(position = 'jitter') + facet_grid(~day)
scatterplot_fest = ggplot ( data = festival.data.stack, aes(x = gender, y = score, fill = gender))+ geom_point(position = 'jitter') + facet_grid(~day)
scatterplot_fest
scatterplot_fest = ggplot ( data = festival.data.stack, aes(x = gender, y = score, color = gender))+ geom_point(position = 'jitter') + facet_grid(~day)
scatterplot_fest
scatterplot_fest + scale_color_brewer()
scatterplot_fest + scale_color_manual(values = c('darkorange', 'darkorchid4))
scatterplot_fest + scale_color_manual(values = c('darkorange', 'darkorchid4'))
scatterplot_fest + geom_boxplot( alpha = 0.1, color = 'black', fill = 'orange')
scatterplot_fest + geom_boxplot( alpha = 0.9, color = 'black', fill = 'orange')
scatterplot_fest + geom_boxplot( alpha = 0.5, color = 'black', fill = 'orange')
library(maps)
load(file="storms.RData")
library(maps)
load(file="./exercise/wk6/storms.RData")
library(maps)
load(file="./data/wk6/storms.RData")
wm = map_data("world")
substorms = storms %>% filter(Season %in% 1999:2010) %>%
filter(!is.na(Season)) %>%
filter(Name!="NOT NAMED")
substorms$ID = as.factor(paste(substorms$Name,
substorms$Season, sep = "."))
substorms$Name = as.factor(substorms$Name)
map1 = ggplot(substorms,
aes(x = Longitude, y = Latitude, group = ID)) +
geom_polygon(data = wm,
aes(x = long, y = lat, group = group),
fill = "gray25", colour = "gray10", size = 0.2) +
geom_path(data = substorms,
aes(group = ID, colour = Wind.WMO.),
alpha = 0.5, size = 0.8) +
xlim(-138, -20) + ylim(3, 55) +
labs(x = "", y = "", colour = "Wind \n(knots)")
map1
wm
substrom
substorm
substorms
map_data('korea')
map_data(')?
?map_data(')
?map_data()
map1 = ggplot(substorms, aes(x = Longitude, y = Latitude, group = ID)) + geom_polygon(data = wm, aes(x = long, y = lat, group = group),
fill = "gray25", colour = "gray10", size = 0.2) +
geom_path(data = substorms,
aes(group = ID, colour = Wind.WMO.),
alpha = 0.5, size = 0.8) +
xlim(-138, -20) + ylim(3, 55) +
labs(x = "", y = "", colour = "Wind \n(knots)")
map1
wm
kr.map = map_data[region == 'South Korea',]
kr.map = map_data(region == 'South Korea')
kr.map = map_data(map, region == 'South Korea')
kr.map = map_data('South Korea')
kr.map = map_data('South Korea')
map_data('South Korea')
map_data('Korea')
map_data()
map_data('world')
kr.map = wm[region=='South Korea',]
kr.map = wm[wm$region=='South Korea',]
kr.map
ggplot(data = kr.map, x = long, y = lat)
ggplot(data = kr.map, x = long, y = lat) + geom_polygon()
ggplot(data = kr.map, x = long, y = lat) + geom_polygon(x = long, y = lat)
ggplot(data = kr.map, x = long, y = lat) + geom_polygon(x = long, y = lat, data = kr.map)
kr.map
ggplot(data = kr.map, x = long, y = lat) + geom_polygon(aes(x = long, y = lat))
kr.map = wm[wm$region=='South Korea',]
ggplot(data = kr.map, x = long, y = lat) + geom_polygon(aes(x = long, y = lat, group = group))
kr.map = wm[wm$region=='South Korea',]
ggplot(data = kr.map, x = long, y = lat) + geom_line(aes(x = long, y = lat, group = group))
map2 = ggplot(substorms,
aes(x = Longitude, y = Latitude, group = ID)) +
geom_polygon(data = wm,
aes(x = long, y = lat, group = group),
fill = "gray25", colour = "gray10", size = 0.2) +
geom_path(data = substorms,
aes(group = ID, colour = Wind.WMO.), size = 0.5) +
xlim(-138, -20) + ylim(3, 55) +
labs(x = "", y = "", colour = "Wind \n(knots)") +
facet_wrap(~Month)
map2 = ggplot(substorms,
aes(x = Longitude, y = Latitude, group = ID)) +
geom_polygon(data = wm,
aes(x = long, y = lat, group = group),
fill = "gray25", colour = "gray10", size = 0.2) +
geom_path(data = substorms,
aes(group = ID, colour = Wind.WMO.), size = 0.5) +
xlim(-138, -20) + ylim(3, 55) +
labs(x = "", y = "", colour = "Wind \n(knots)") +
facet_wrap(~Month)
map2
map1 + facet_wrap(~Month)
par(bg="white")
set.seed(1)
a=seq(1:100) + 0.1*seq(1:100)*sample(c(1:10) , 100 , replace=T)
b=seq(1:100) + 0.2*seq(1:100)*sample(c(1:10) , 100 , replace=T)
size = 3 +(a/30) + rnorm(length(a))
d = (b/300) + rnorm(length(a),0, 0.1)
d[d<0] = 0
rdata<- data.frame(x = a, y = b, size = size, temp = d)
myplot <- ggplot(data = rdata, aes ( x = x, y = y)) +
geom_point(aes(x,y, colour = temp), size = size) +
scale_color_gradient2(midpoint = 0.5, low="#EF5500",
mid="#FFFF77", high="blue")
myplot
map1 = ggplot(substorms, aes(x = Longitude, y = Latitude, group = ID)) + geom_polygon(data = wm, aes(x = long, y = lat, group = group),
fill = "gray25", colour = "gray10", size = 0.2) +
geom_path(data = substorms, aes(group = ID, colour = Wind.WMO.),alpha = 0.5, size = 0.8) +
xlim(-138, -20) + ylim(3, 55) +
labs(x = "", y = "", colour = "Wind \n(knots)")
map1
gc()
rm(list=ls())
dev.off()
library(map)
library(maps)
library(mapdata)
install.packages('mapdata')
install.packages('mapdata')
install.packages('mapdata')
library(maps)
library(mapdata)
map(database = 'country')
map(database = 'usa')
map(database = 'country')
map(database = 'cunty')
map(database = 'county')
map(database = 'county')
map(database = 'world', region = 'south korea')
map('world2Hires', 'South Korea')
kr.map = ggplot2::map_data('world2hires','south korea')
kr.map = ggplot2::map_data('world2hires','South Korea')
kr.map = ggplot2::map_data('World2Hires','South Korea')
map_data('World2Hires','South Korea')
kr.map = ggplot2::mapdata('World2Hires','South Korea')
data("us.cities")
head(us.cities)
ggplot2::map_data('World2Hires', 'South Korea')
map('state', 'Georgia')
map('state', 'Georgia')
map.cities(us.cities, country = GA)
map('state', 'Georgia')
map.cities(us.cities, country = 'GA')
map('world', fill = T, col = rainbow(100))
map('world', fill = T)
map('world', fill = T, color = rainbow)
map('world', fill = T, color = rainbow(7))
map('world', fill = T, col = rainbow(7))
map_data('world')
map_data('world2Hires', 'South Korea')
map_data('world')[region]
map_data('world')$region
length(unique(map_data('world')$region))
map('world', fill = T, col = rainbow(252))
length(unique(rainbow(252)))
length(unique(map_data('world')$group))
map('world', fill = T, col = rainbow(1627))
data(unemp) # unemployed rate data
data(county.fips) # county fips data
head(unemp,3)
head(county.fips)
unemp$colorBuckets <- as.numeric(cut(unemp$unemp,
c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
unemp$colorBuckets
unemp
colorsmatched
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
colors = c("#F1EEF6","#D4B9DA","#C994C7","#DF65B0","#DD1C77","#980043")
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0, lty = 0, projection = "polyconic")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
colors = c("#F1EEF6","#D4B9DA","#C994C7","#DF65B0","#DD1C77","#980043")
map("county", col = unemp$colorBuckets, fill = TRUE, resolution = 0, lty = 0, projection = "polyconic")
colors[colorsmat
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0, lty = 0, projection = "polyconic")
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
colors = c("#F1EEF6","#D4B9DA","#C994C7","#DF65B0","#DD1C77","#980043")
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0, lty = 0, projection = "polyconic")
map_data('county')
colorsmatched[1]
county.fips[1]
county.fips[1,]
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
colors = c("#F1EEF6","#D4B9DA","#C994C7","#DF65B0","#DD1C77","#980043")
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0, lty = 0)
colorsmatched[1]
county.fips[1,]
umemp$fips[1,]
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
colors = c("#F1EEF6","#D4B9DA","#C994C7","#DF65B0","#DD1C77","#980043")
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0, lty = 0)
colorsmatched[1]
county.fips[1,]
umemp$fips[1,]
colorsmatched[1]
county.fips[1,]
unemp$fips[1,]
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
colors = c("#F1EEF6","#D4B9DA","#C994C7","#DF65B0","#DD1C77","#980043")
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0, lty = 0)
colorsmatched[1]
county.fips$fips[1,]
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
colors = c("#F1EEF6","#D4B9DA","#C994C7","#DF65B0","#DD1C77","#980043")
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0, lty = 0)
colorsmatched[1]
county.fips[1,]
unemp[1,]
colorsmatched[1]
county.fips[1,]
unemp[1,]
unemp$colorBuckets <- as.numeric(cut(unemp$unemp, c(0, 2, 4, 6, 8, 10, 100)))
colorsmatched <- unemp$colorBuckets[match(county.fips$fips, unemp$fips)]
library(mapproj)
colors = c("#F1EEF6","#D4B9DA","#C994C7","#DF65B0","#DD1C77","#980043")
map("county", col = colors[colorsmatched], fill = TRUE, resolution = 0, lty = 0, projection = 'polyconic')
#colorsmatched[1]
#county.fips[1,]
#unemp[1,]
wm = map_data('world2hires')
wm = map_data('World2Hires')
wm = ggplot2::map_data('World2Hires')
map_data('World2Hires')
wm = map_data('World')
wm = map_data('world')
wm
map('world2hires', regions = 'South Korea')
map('World2Hires', regions = 'South Korea')
map('WorldHires', regions = 'South Korea')
grep( "Korea", ur$region )
ur <- wm %>% dplyr::select(region)%>%unique()
grep( "Korea", ur$region )
map("world", ur$region[c(125,185)],fill = T,
col = "blue")
map("worldhires", ur$region[c(125,185)],fill = T, col = "blue")
map("world2hires", ur$region[c(125,185)],fill = T, col = "blue")
