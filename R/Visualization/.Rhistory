)
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'cityName', choices = sort(unique(dat$cityName))),
selectInput('date', 'dataTime', choices = sort(unique(dat$dataTime))),
selectInput('category', 'category', choices = colnames(dat)[3:8])
),
mainPanel(
plotOutput("hist1"),
plotOutput("hist2")
)
)
)
library(shiny)
ui = fluidPage(
titlePanel("Air quality item_data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'cityName', choices = sort(unique(item_dat$cityName))),
selectInput('item_date', 'item_dataTime', choices = sort(unique(item_dat$item_dataTime))),
selectInput('category', 'category', choices = colnames(item_dat)[3:8])
),
mainPanel(
plotOutput("hist1"),
plotOutput("hist2")
)
)
)
server = function(input, output)
{
selecteditem_data1 = reactive({
item_dat[item_dat$item_dataTime == input$item_date, c(input$category)]
})
selecteditem_data2 = reactive({
item_dat[item_dat$cityName == input$region, c(input$category)]
})
output$hist1 = renderPlot({
hist(selecteditem_data1(), main = "선택된 시간의 미세먼지", xlab = "", ylab = "")
})
output$hist2 = renderPlot({
hist(selecteditem_data2(), main = "선택된 구의 미세먼지", xlab = "", ylab = "")
})
}
shinyApp(ui = ui, server = server)
dat = read.csv('air_quality.csv')
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'cityName', choices = sort(unique(dat$cityName))),
selectInput('date', 'dataTime', choices = sort(unique(dat$dataTime))),
selectInput('category', 'category', choices = colnames(dat)[3:8])
),
mainPanel(
plotOutput("hist1"),
plotOutput("hist2")
)
)
)
server = function(input, output)
{
selectedData1 = reactive({
dat[dat$dataTime == input$date, c(input$category)]
})
selectedData2 = reactive({
dat[dat$cityName == input$region, c(input$category)]
})
output$hist1 = renderPlot({
hist(selectedData1(), main = "선택된 시간의 미세먼지", xlab = "", ylab = "")
})
output$hist2 = renderPlot({
hist(selectedData2(), main = "선택된 구의 미세먼지", xlab = "", ylab = "")
})
}
shinyApp(ui = ui, server = server)
dat
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'cityName', choices = sort(unique(dat$cityName))),
selectInput('date', 'dataTime', choices = sort(unique(dat$dataTime))),
selectInput('category', 'category', choices = colnames(dat)[3:8])
),
mainPanel(
plotOutput("hist1"),
plotOutput("hist2")
)
)
)
server = function(input, output)
{
selectedData1 = reactive({
dat[dat$dataTime == input$date, c(input$category)]
})
selectedData2 = reactive({
dat[dat$cityName == input$region, c(input$category)]
})
output$hist1 = renderPlot({
hist(selectedData1(), main = "선택된 시간의 미세먼지", xlab = "", ylab = "")
})
output$hist2 = renderPlot({
hist(selectedData2(), main = "선택된 구의 미세먼지", xlab = "", ylab = "")
})
}
shinyApp(ui = ui, server = server)
item_dat$dataTime
item_dat$dataTime = as.factor(item_dat$dataTime)
item_dat
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'cityName', choices = sort(unique(item_data$cityName))),
selectInput('date', 'dataTime', choices = sort(unique(item_data$dataTime))),
selectInput('category', 'category', choices = colnames(item_data)[3:8])
),
mainPanel(
plotOutput("hist1"),
plotOutput("hist2")
)
)
)
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'cityName', choices = sort(unique(item_dat$cityName))),
selectInput('date', 'dataTime', choices = sort(unique(item_dat$dataTime))),
selectInput('category', 'category', choices = colnames(item_dat)[3:8])
),
mainPanel(
plotOutput("hist1"),
plotOutput("hist2")
)
)
)
server = function(input, output)
{
selectedData1 = reactive({
item_dat[item_dat$dataTime == input$date, c(input$category)]
})
selectedData2 = reactive({
item_dat[item_dat$cityName == input$region, c(input$category)]
})
output$hist1 = renderPlot({
hist(selectedData1(), main = "선택된 시간의 미세먼지", xlab = "", ylab = "")
})
output$hist2 = renderPlot({
hist(selectedData2(), main = "선택된 구의 미세먼지", xlab = "", ylab = "")
})
}
shinyApp(ui = ui, server = server)
dat
item_dat[,3:6]
item_dat[,3:6] = as.numeric(item_dat[,3:6])
item_dat[,3] = as.numeric(item_dat[,3])
item_dat
for (i in 4:6){
item_dat[,i] = as. numeric(item_dat[,i])
item_dat[,i] = as.numeric(item_dat[,i])
for (i in 4:6){
item_dat[,i] = as.numeric(item_dat[,i])
}
item_dat
for (i in 7:8){
item_dat[,i] = as.integer(item_dat[,i])
}
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'cityName', choices = sort(unique(item_dat$cityName))),
selectInput('date', 'dataTime', choices = sort(unique(item_dat$dataTime))),
selectInput('category', 'category', choices = colnames(item_dat)[3:8])
),
mainPanel(
plotOutput("hist1"),
plotOutput("hist2")
)
)
)
server = function(input, output)
{
selectedData1 = reactive({
item_dat[item_dat$dataTime == input$date, c(input$category)]
})
selectedData2 = reactive({
item_dat[item_dat$cityName == input$region, c(input$category)]
})
output$hist1 = renderPlot({
hist(selectedData1(), main = "선택된 시간의 미세먼지", xlab = "", ylab = "")
})
output$hist2 = renderPlot({
hist(selectedData2(), main = "선택된 구의 미세먼지", xlab = "", ylab = "")
})
}
shinyApp(ui = ui, server = server)
library(httr)
library(rvest)
service_key = "X%2BqJnBkgzZcpxzwi%2BOJ94wq54CYi53KymXOFKhc5rTIRL%2BlYAoDuh2lK4doTPiUqISVlw1JE1MN42AZUT4sVhQ%3D%3D"
url = paste0("http://openapi.airkorea.or.kr/openapi/services/rest/",
"ArpltnInforInqireSvc/getCtprvnMesureSidoLIst?",
"sidoName=서울",
"&searchCondition=DAILY",
"&pageNo=",1,
"&numOfRows=",600,
"&ServiceKey=",service_key)
url_xml = xml(GET(url))
item_list = url_xml %>% xml_nodes('items item')
item_list = lapply(item_list, function(x) return(xml_text(xml_children(x))))
item_dat = do.call('rbind',item_list)
item_dat = data.frame(item_dat, stringsAsFactors = F)
item_dat[item_dat == '-'] = 0
tmp = xml_nodes(url_xml, 'items item')
colnames_dat = xml_tag(xml_children(tmp[[1]]))
colnames(item_dat) = colnames_dat
item_dat
library(ggmap)
uniq_region = unique(item_dat$cityName)
geo_dat = geocode(paste("서울특별시", uniq_region))
geo_dat = cbind(cityName = uniq_region, geo_dat)
head(geo_dat)
item_dat = merge(item_dat, geo_dat, by = "cityName")
for (i in 7:8){
item_dat[,i] = as.integer(item_dat[,i])
}
for (i in 3:6){
item_dat[,i] = as.numeric(item_dat[,i])
}
head(item_dat)
write.csv(item_dat, 'air_quality.csv', row.names = F)
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('region', 'cityName', choices = sort(unique(item_dat$cityName))),
selectInput('date', 'dataTime', choices = sort(unique(item_dat$dataTime))),
selectInput('category', 'category', choices = colnames(item_dat)[3:8])
),
mainPanel(
plotOutput("hist1"),
plotOutput("hist2")
)
)
)
server = function(input, output)
{
selectedData1 = reactive({
item_dat[item_dat$dataTime == input$date, c(input$category)]
})
selectedData2 = reactive({
item_dat[item_dat$cityName == input$region, c(input$category)]
})
output$hist1 = renderPlot({
hist(selectedData1(), main = "선택된 시간의 미세먼지", xlab = "", ylab = "")
})
output$hist2 = renderPlot({
hist(selectedData2(), main = "선택된 구의 미세먼지", xlab = "", ylab = "")
})
}
shinyApp(ui = ui, server = server)
library(httr)
library(rvest)
service_key = "X%2BqJnBkgzZcpxzwi%2BOJ94wq54CYi53KymXOFKhc5rTIRL%2BlYAoDuh2lK4doTPiUqISVlw1JE1MN42AZUT4sVhQ%3D%3D"
url = paste0("http://openapi.airkorea.or.kr/openapi/services/rest/",
"ArpltnInforInqireSvc/getCtprvnMesureSidoLIst?",
"sidoName=서울",
"&searchCondition=DAILY",
"&pageNo=",1,
"&numOfRows=",600,
"&ServiceKey=",service_key)
url_xml = xml(GET(url))
item_list = url_xml %>% xml_nodes('items item')
item_list = lapply(item_list, function(x) return(xml_text(xml_children(x))))
item_dat = do.call('rbind',item_list)
item_dat = data.frame(item_dat, stringsAsFactors = F)
item_dat[item_dat == '-'] = 0
tmp = xml_nodes(url_xml, 'items item')
colnames_dat = xml_tag(xml_children(tmp[[1]]))
colnames(item_dat) = colnames_dat
item_dat
library(ggmap)
uniq_region = unique(item_dat$cityName)
geo_dat = geocode(paste("서울특별시", uniq_region))
geo_dat = cbind(cityName = uniq_region, geo_dat)
head(geo_dat)
item_dat = merge(item_dat, geo_dat, by = "cityName")
for (i in 7:8){
item_dat[,i] = as.integer(item_dat[,i])
}
for (i in 3:6){
item_dat[,i] = as.numeric(item_dat[,i])
}
head(item_dat)
write.csv(item_dat, 'air_quality.csv', row.names = F)
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('date', 'dataTime', choices = sort(unique(dat$dataTime))),
selectInput('category', 'category', choices = colnames(dat)[3:8]),
sliderInput('bins', 'detalied density', min = 5, max = 30, value = 10)
),
mainPanel(
plotOutput("mapplot"),
tableOutput("tt")
)
)
)
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('date', 'dataTime', choices = sort(unique(item_dat$dataTime))),
selectInput('category', 'category', choices = colnames(item_dat)[3:8]),
sliderInput('bins', 'detalied density', min = 5, max = 30, value = 10)
),
mainPanel(
plotOutput("mapplot"),
tableOutput("tt")
)
)
)
server = function(input, output)
{
map_dat = reactive({
tmp_dat = item_dat[item_dat$dataTime == input$date, c(input$category, "lon", "lat")]
values = tmp_dat[,c(input$category)]
min_value = min(values[values != 0])
values = values / min_value
tmp_dat[,c(input$category)] = values
with(tmp_dat, tmp_dat[rep(1:nrow(tmp_dat), tmp_dat[,c(input$category)]),])
})
map = ggmap(get_googlemap(center = c(lon = 127.02, lat = 37.53),
zoom = 11,
maptype = "roadmap",
color = "bw"))
output$mapplot = renderPlot({
map  + stat_density2d(aes(x = lon, y = lat, alpha = ..level..),
data = map_dat(),
size= 2,
bins= input$bins,
geom="polygon") +
scale_alpha(range = c(0, 0.3))
}, height = 1200, width = 1024)
}
shinyApp(ui = ui, server = server)
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('date', 'dataTime', choices = sort(unique(item_dat$dataTime))),
selectInput('category', 'category', choices = colnames(item_dat)[3:8]),
sliderInput('bins', 'detalied density', min = 5, max = 30, value = 10)
),
mainPanel(
plotOutput("mapplot"),
tableOutput("tt")
)
)
)
server = function(input, output)
{
map_dat = reactive({
tmp_dat = item_dat[item_dat$dataTime == input$date, c(input$category, "lon", "lat")]
values = tmp_dat[,c(input$category)]
min_value = min(values[values != 0])
values = values / min_value
tmp_dat[,c(input$category)] = values
with(tmp_dat, tmp_dat[rep(1:nrow(tmp_dat), tmp_dat[,c(input$category)]),])
})
map = ggmap(get_googlemap(center = c(lon = 127.02, lat = 37.53),
zoom = 11,
maptype = "roadmap",
color = "bw"))
output$mapplot = renderPlot({
map  + stat_density2d(aes(x = lon, y = lat, alpha = ..level..),
data = map_dat(),
size= 2,
bins= input$bins,
geom="polygon") +
scale_alpha(range = c(0, 0.3))
}, height = 1200, width = 1024)
}
shinyApp(ui = ui, server = server)
library("ggplot2", lib.loc="~/R/win-library/3.4")
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('date', 'dataTime', choices = sort(unique(item_dat$dataTime))),
selectInput('category', 'category', choices = colnames(item_dat)[3:8]),
sliderInput('bins', 'detalied density', min = 5, max = 30, value = 10)
),
mainPanel(
plotOutput("mapplot"),
tableOutput("tt")
)
)
)
server = function(input, output)
{
map_dat = reactive({
tmp_dat = item_dat[item_dat$dataTime == input$date, c(input$category, "lon", "lat")]
values = tmp_dat[,c(input$category)]
min_value = min(values[values != 0])
values = values / min_value
tmp_dat[,c(input$category)] = values
with(tmp_dat, tmp_dat[rep(1:nrow(tmp_dat), tmp_dat[,c(input$category)]),])
})
map = ggmap(get_googlemap(center = c(lon = 127.02, lat = 37.53),
zoom = 11,
maptype = "roadmap",
color = "bw"))
output$mapplot = renderPlot({
map  + stat_density2d(aes(x = lon, y = lat, alpha = ..level..),
data = map_dat(),
size= 2,
bins= input$bins,
geom="polygon") +
scale_alpha(range = c(0, 0.3))
}, height = 1200, width = 1024)
}
shinyApp(ui = ui, server = server)
gc()
library(httr)
library(rvest)
service_key = "X%2BqJnBkgzZcpxzwi%2BOJ94wq54CYi53KymXOFKhc5rTIRL%2BlYAoDuh2lK4doTPiUqISVlw1JE1MN42AZUT4sVhQ%3D%3D"
url = paste0("http://openapi.airkorea.or.kr/openapi/services/rest/",
"ArpltnInforInqireSvc/getCtprvnMesureSidoLIst?",
"sidoName=서울",
"&searchCondition=DAILY",
"&pageNo=",1,
"&numOfRows=",600,
"&ServiceKey=",service_key)
url_xml = xml(GET(url))
item_list = url_xml %>% xml_nodes('items item')
item_list = lapply(item_list, function(x) return(xml_text(xml_children(x))))
item_dat = do.call('rbind',item_list)
item_dat = data.frame(item_dat, stringsAsFactors = F)
item_dat[item_dat == '-'] = 0
tmp = xml_nodes(url_xml, 'items item')
colnames_dat = xml_tag(xml_children(tmp[[1]]))
colnames(item_dat) = colnames_dat
item_dat
library(ggmap)
uniq_region = unique(item_dat$cityName)
geo_dat = geocode(paste("서울특별시", uniq_region))
geo_dat = cbind(cityName = uniq_region, geo_dat)
head(geo_dat)
item_dat = merge(item_dat, geo_dat, by = "cityName")
for (i in 7:8){
item_dat[,i] = as.integer(item_dat[,i])
}
for (i in 3:6){
item_dat[,i] = as.numeric(item_dat[,i])
}
head(item_dat)
write.csv(item_dat, 'air_quality.csv', row.names = F)
library(shiny)
ui = fluidPage(
titlePanel("Air quality data visualization"),
sidebarLayout(
sidebarPanel(
selectInput('date', 'dataTime', choices = sort(unique(item_dat$dataTime))),
selectInput('category', 'category', choices = colnames(item_dat)[3:8]),
sliderInput('bins', 'detalied density', min = 5, max = 30, value = 10)
),
mainPanel(
plotOutput("mapplot"),
tableOutput("tt")
)
)
)
server = function(input, output)
{
map_dat = reactive({
tmp_dat = item_dat[item_dat$dataTime == input$date, c(input$category, "lon", "lat")]
values = tmp_dat[,c(input$category)]
min_value = min(values[values != 0])
values = values / min_value
tmp_dat[,c(input$category)] = values
with(tmp_dat, tmp_dat[rep(1:nrow(tmp_dat), tmp_dat[,c(input$category)]),])
})
map = ggmap(get_googlemap(center = c(lon = 127.02, lat = 37.53),
zoom = 11,
maptype = "roadmap",
color = "bw"))
output$mapplot = renderPlot({
map  + stat_density2d(aes(x = lon, y = lat, alpha = ..level..),
data = map_dat(),
size= 2,
bins= input$bins,
geom="polygon") +
scale_alpha(range = c(0, 0.3))
}, height = 1200, width = 1024)
}
shinyApp(ui = ui, server = server)
