aq_1 = subset(airquality, select=C(Ozone,Wind,Month,Day))
airquality
aq_1 = subset(airquality, select=C(Ozone,Wind,Month,Day))
attach(airquality)
aq_1 = subset(airquality, select=C(Ozone,Wind,Month,Day))
detach(airquality)
names(airquality)
aq_1 = subset(airquality, select=C(Ozone,Wind,Month,Day), subset = (Wind>12 & Temp >80))
aq_1 = subset(airquality, select=C(Ozone,Wind,Month,Day), subset = (Wind>12 & Temp >80), sort = F)
aq_1 = subset(airquality, select=c(Ozone,Wind,Month,Day), subset = (Wind>12 & Temp >80), sort = F)
aq1
aq_1
aq_2 = subset(airquality, select=c(Ozone,Wind,Month,Day))
aq_2
aq_2[airquality$Wind>12&airquality$Temp>80,]
aq_1
aq_2 = subset(airquality, select = c(Solar.R, Temp, Month, Day), subset= (Wind>12.0, Temp>80), sort=F)
aq_2 = subset(airquality, select = c(Solar.R, Temp, Month, Day), subset= (Wind>12.0& Temp>80), sort=F)
aq_2
merge(aq_1,aq_2)
amstat_movie = read.delim('http://www.amstat.org/publications/jse/datasets/movietotal.dat.txt',sep='/t')
amstat_movie = read.delim('http://www.amstat.org/publications/jse/datasets/movietotal.dat.txt',sep='\t')
str(amstat_movie)
amstat_movie$MOVIE = as.character(amstat_movie$MOVIE)
grep('in',amstat_movie$MOVIE, ignore.case = F)
amstat_movie[grep('in',amstat_movie$MOVIE, ignore.case = F)]
amstat_movie[grep('in',amstat_movie$MOVIE, ignore.case = F),]
amstat_movie[grep('in',amstat_movie$MOVIE, ignore.case = T),2]
Sys.Date()
format(Sys.Date(),format = '%d/ %m/ %y'
)
format(Sys.Date(),format = '%d/ %m/ %yyyy)'
)
format(Sys.Date(),format = '%d/ %m/ %Y')
write.csv(amstat_movie,'amstat_movie.csv')
library(xlsx
)
install.packages('xlsx')
installed.packages()
.libPaths()
library(xlsx)
library(rgl)
library(dplyr)
Sys.setlocale(,'English')
mailorder = read.xlsx2('d:/github/r/database_marketing/hw2/mailorder.xls', 1)
## Factor > numericd
mailorder$id = as.numeric(as.character(mailorder$id))
mailorder$monetary = as.numeric(as.character(mailorder$monetary)) #총 지출액
mailorder$recency = as.numeric(as.character(mailorder$recency)) #최근 구매
mailorder$frequency = as.numeric(as.character(mailorder$frequency)) #총 구매 건수
mailorder$duration = as.numeric(as.character(mailorder$duration)) #첫 구매
mailorder$purchase = as.numeric(as.character(mailorder$purchase)) #메일구매여부
order_month = mailorder$frequency / mailorder$duration #월 주문 횟수
mon_month = mailorder$monetary / mailorder$duration #월 주문액
mailorder = cbind(mailorder,mon_month)
mailorder = cbind(mailorder,order_month)
test_group = mailorder[1:2000,]
valid_group = mailorder[2001:4000,]
summary(mailorder)
mailorder = read.xlsx2('d:/github/r/database_marketing/hw2/mailorder.xls', 1)
## Factor > numericd
mailorder$id = as.numeric(as.character(mailorder$id))
mailorder$monetary = as.numeric(as.character(mailorder$monetary)) #총 지출액
mailorder$recency = as.numeric(as.character(mailorder$recency)) #최근 구매
mailorder$frequency = as.numeric(as.character(mailorder$frequency)) #총 구매 건수
mailorder$duration = as.numeric(as.character(mailorder$duration)) #첫 구매
mailorder$purchase = as.numeric(as.character(mailorder$purchase)) #메일구매여부
order_month = mailorder$frequency / mailorder$duration #월 주문 횟수
mon_month = mailorder$monetary / mailorder$duration #월 주문액
order_freq = mailorder$monetary / mailorder$frequency #1회 구매액
mailorder = cbind(mailorder,mon_month, order_month, order_freq)
test_group = mailorder[1:2000,]
valid_group = mailorder[2001:4000,]
summary(mailorder)
plot(order_freq, pch = 19, col = lv_color)
lv_color = rep('red',4000)
lv_color[mailorder$purchase==0] = 'yellow'
plot(order_freq, pch = 19, col = lv_color)
##
simple_lm = lm(purchase~recency+order_month+order_freq, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[sort(lm_valid)<0.1082] = 0
a = table(valid_result, valid_group$purchase)
a[2,2]/sum(a[2,])
a
########################### prob
##
simple_lm = lm(purchase~recency+mon_month+order_freq, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[sort(lm_valid)<0.1082] = 0
a = table(valid_result, valid_group$purchase)
a[2,2]/sum(a[2,])
a
########################### prob
##
simple_lm = lm(purchase~recency+mon_month+frequency, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[sort(lm_valid)<0.1082] = 0
a = table(valid_result, valid_group$purchase)
a[2,2]/sum(a[2,])
a
########################### prob
##
simple_lm = lm(purchase~recency+monetary+frequency, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[sort(lm_valid)<0.1082] = 0
a = table(valid_result, valid_group$purchase)
a[2,2]/sum(a[2,])
a
########################### prob
##
simple_lm = lm(purchase~recency+mon_month+order_freq, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[sort(lm_valid)<0.1082] = 0
a = table(valid_result, valid_group$purchase)
a[2,2]/sum(a[2,])
a
########################### prob
##
simple_lm = lm(purchase~recency+mon_month+order_freq, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[sort(lm_valid)<0.1078] = 0
a = table(valid_result, valid_group$purchase)
a[2,2]/sum(a[2,])
a
########################### prob
source('D:/Github/R/Data_mining/170831/use of glmnet.R', echo=TRUE)
install.packages('glmnet')
german = read.csv('../Data_Mining/170822/german_numeric.csv')
setwd('d:/github/R/visualization')
german = read.csv('../Data_Mining/170822/german_numeric.csv')
library(class)
german[,16] = german[,16]-1
Response = rep(0,1000)
for (i in c(1:1000)){
if (german[i,16]==0){Response[i]='Good'}
else {Response[i]='Bad'}
}
attach(german)
train = 1:600
test = 601:1000
train.x = german[train,-16]
test.x = german[test,-16]
train.y = german[train,16]
test.y = german$Result[test]
library(MASS)
lda.fit = lda(Result~., data = german, subset = train)
lda.fit
lda.pred = predict(lda.fit, test.x)
lda.pred
names(lda.pred)
lda.class = lda.pred$class
table(lda.class, test.y)
lda.pred
$class
names(lda.pred)
set.seed(1)
glm.fit = glm(Result~.,data = german, family = binomial)
glm.probs = predict(glm.fit,type='response')
glm.pred = rep('Good', 1000)
glm.pred[glm.probs>.5] = 'Bad'
table(glm.pred,Response)
##
simple_lm = lm(purchase~recency+mon_month+order_freq, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<0.1078] = 0
a = table(valid_result, valid_group$purchase)
a[2,2]/sum(a[2,])
a
########################### prob
## 4번 - 16%
simple_lm = lm(purchase~recency+frequency+monetary, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<0.1081] = 0
table(valid_result)
a = table(valid_result, valid_group$purchase)
a[2,2]/sum(a[2,])
a
########################### prob
##
simple_lm = lm(purchase~recency+mon_month+frequency, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<0.1078] = 0
a = table(valid_result, valid_group$purchase)
a
cat('맞춘확률')
a[2,2]/sum(a[2,])
########################### prob
##
simple_lm = lm(purchase~recency+mon_month+frequency, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<0.1063] = 0
a = table(valid_result, valid_group$purchase)
a
cat('맞춘확률')
a[2,2]/sum(a[2,])
########################### prob
##
simple_lm = lm(purchase~recency+mon_month+frequency, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<0.1064] = 0
a = table(valid_result, valid_group$purchase)
a
cat('맞춘확률')
a[2,2]/sum(a[2,])
########################### prob
##
simple_lm = lm(purchase~., data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<0.1064] = 0
a = table(valid_result, valid_group$purchase)
a
cat('맞춘확률')
a[2,2]/sum(a[2,])
########################### prob
##
simple_lm = lm(purchase~., data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<0.1030] = 0
a = table(valid_result, valid_group$purchase)
a
cat('맞춘확률')
a[2,2]/sum(a[2,])
########################### prob
step(simple_lm)
step_lm = step(simple_lm)
steplm_valid = predict(step_lm, newdata = valid_group, type = "response")
summary(sort(steplm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[steplm_valid<0.1171] = 0
a = table(valid_result, valid_group$purchase)
a
cat('맞춘확률')
a[2,2]/sum(a[2,])
library(glmnet)
credit = read.csv('../Data_Mining/Credit.csv')
head(credit)
attach(credit)
Income = scale(Income)
Limit = scale(Limit)
Rating = scale(Rating)
grid = 10^seq(10,-2, length = 100)
x = cbind(Income, Limit, Rating, Student)
y = Balance
ridge.mod = glmnet(x, y, alpha=0, lambda = grid)
dim(coef(ridge.mod))
coef(ridge.mod)[,50]
plot(log(grid), coef(ridge.mod)[2,], type = 'l', col='red', ylim = c(min(coef(ridge.mod)),max(coef(ridge.mod)) ))
lines(log(grid), coef(ridge.mod)[3,], col='blue')
lasso.mod=glmnet(x[train,],y[train],alpha=1,lambda=grid)
plot(lasso.mod)
regfit.full
regsubsets(Salary~.,Hitters)
summary(sort(steplm_valid)[1501:2000])
str(summary(sort(steplm_valid)[1501:2000]))
summary(sort(steplm_valid)[1501:2000])[1]
sum_lm = summary(sort(steplm_valid)[1501:2000])
valid_result[steplm_valid<sum_lm[1]] = 0
a = table(valid_result, valid_group$purchase)
a
## Tree model assumption - 14.8%
tree_test = valid_group[valid_group$recency<16 & valid_group$frequency>2,]
tree_result = rep(0,2000)
tree_result[valid_group$recency<16 & valid_group$frequency>2] = 1
dim(tree_test)
tree_purchase = tree_test[tree_test$purchase == 1,]
dim(tree_purchase)
cat('맞춘 확률', dim(tree_purchase)[1]/dim(tree_test)[1])
a = table(tree_result, valid_group$purchase)
a[2,2]/sum(a[2,])
summary(step_lm)
step_lm = step(simple_lm, direction = 'forward')
step(simple_lm, direction = 'forward')
step_lm = step(simple_lm, direction = stepwise)
step(simple_lm, direction = 'stepwise')
step(simple_lm, direction = 'both')
simple_lm = lm(purchase~gender + recency + frequency + mon_month + order_month, data= test_group)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<sum_lm[1]] = 0
a = table(valid_result, valid_group$purchase)
a
cat('맞춘확률')
a[2,2]/sum(a[2,])
a
399+92
valid_result = rep(1,2000)
valid_result[lm_valid<(sum_lm[1]-1)] = 0
cat('맞춘확률')
a[2,2]/sum(a[2,])
a
summary(sort(lm_valid)[1501:2000])
sum_lm = summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<(sum_lm[1])] = 0
cat('맞춘확률')
a[2,2]/sum(a[2,])
a
simple_lm = lm(purchase~gender + recency + frequency + mon_month + order_month, data= test_group)
summary(simple_lm)
lm_valid = predict(simple_lm, newdata = valid_group, type = "response")
sum_lm = summary(sort(lm_valid)[1501:2000])
valid_result = rep(1,2000)
valid_result[lm_valid<(sum_lm[1])] = 0
a = table(valid_result, valid_group$purchase)
a
cat('맞춘확률')
a[2,2]/sum(a[2,])
testorder = mailorder
testorder
##life_value test
testorder = mailorder
adj_freq = sqrt(testorder$frequency)
testorder = cbind(testorder,adj_freq)
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= test_group)
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= testorder[1:2000])
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= testorder[1:2000,])
test_valid = predict(test_lm, newdata = valid_group, type = "response")
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= testorder[1:2000,])
test_valid = predict(test_lm, newdata = valid_group, type = "response")
testorder[1:2000,]
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= (testorder[1:2000,]))
test_valid = predict(test_lm, newdata = valid_group, type = "response")
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= ttestorder)
test_valid = predict(test_lm, newdata = valid_group, type = "response")
ttsetorder = testorder[1:2000,]
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= ttestorder)
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= ttsetorder)
test_valid = predict(test_lm, newdata = valid_group, type = "response")
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= ttsetorder)
test_valid = predict(test_lm, newdata = valid_group, type = "response")
##life_value test
testorder = mailorder
adj_freq = sqrt(testorder$frequency)
testorder = cbind(testorder,adj_freq)
ttsetorder = testorder[1:2000,]
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= ttsetorder)
test_valid = predict(test_lm, newdata = valid_group, type = "response")
valid_group
ttsetorder
rm(list=ls()
)
mailorder = read.xlsx2('d:/github/r/database_marketing/hw2/mailorder.xls', 1)
## Factor > numericd
mailorder$id = as.numeric(as.character(mailorder$id))
mailorder$monetary = as.numeric(as.character(mailorder$monetary)) #총 지출액
mailorder$recency = as.numeric(as.character(mailorder$recency)) #최근 구매
mailorder$frequency = as.numeric(as.character(mailorder$frequency)) #총 구매 건수
mailorder$duration = as.numeric(as.character(mailorder$duration)) #첫 구매
mailorder$purchase = as.numeric(as.character(mailorder$purchase)) #메일구매여부
order_month = mailorder$frequency / mailorder$duration #월 주문 횟수
mon_month = mailorder$monetary / mailorder$duration #월 주문액
order_freq = mailorder$monetary / mailorder$frequency #1회 구매액
mailorder = cbind(mailorder,mon_month, order_month, order_freq)
test_group = mailorder[1:2000,]
valid_group = mailorder[2001:4000,]
summary(mailorder)
##life_value test
testorder = mailorder
adj_freq = sqrt(testorder$frequency)
testorder = cbind(testorder,adj_freq)
ttsetorder = testorder[1:2000,]
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= ttsetorder)
test_valid = predict(test_lm, newdata = valid_group, type = "response")
tval = testorder[2001:,]
tval = testorder[2001:4000,]
test_valid = predict(test_lm, newdata = tval, type = "response")
test_sum = summary(sort(test_valid)[1501:2000])
test_valid_result = rep(1,2000)
test_valid_result[test_valid<(sum_lm[1])] = 0
test_valid_result[test_valid<(test_sum[1])] = 0
b = table(test_valid_result, valid_group$purchase)
b
cat('맞춘확률')
b[2,2]/sum(b[2,])
##life_value test
testorder = mailorder
adj_freq = sqrt(testorder$frequency)
testorder = cbind(testorder,adj_freq)
ttsetorder = testorder[1:2000,]
tval = testorder[2001:4000,]
test_lm = lm(purchase~gender + recency + adj_freq + mon_month + order_month, data= ttsetorder)
test_valid = predict(test_lm, newdata = tval, type = "response")
test_sum = summary(sort(test_valid)[1501:2000])
test_valid_result = rep(1,2000)
test_valid_result[test_valid<(test_sum[1])] = 0
b = table(test_valid_result, valid_group$purchase)
b
cat('맞춘확률')
b[2,2]/sum(b[2,])
