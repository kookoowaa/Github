PI %>% filter(ADDR == i) %>% select(RATE_HOUR) %>% summarize(mean
}
for (i in ADDR) {
PI %>% filter(ADDR == i) %>% select(RATE_HOUR) %>% summarize(mean)
}
PI %>% filter(ADDR == i) %>% select(RATE_HOUR) %>% summarize()
PI %>% filter(ADDR == i) %>% select(RATE_HOUR) %>% print(summarize())
for (i in ADDR) {
PI %>% filter(ADDR == i) %>% select(RATE_HOUR) %>% print(summarize())
}
for (i in ADDR) {
PI %>% filter(ADDR == i) %>% select(RATE_HOUR) %>% print(summarize(mean()))
}
PI %>% filter(ADDR == i) %>% select(RATE_HOUR) %>% summarize(mean())%>%print()
for (i in ADDR) {
PI %>% filter(ADDR == i) %>% select(RATE_HOUR) %>% summarize(mean())%>%print()
}
PI %>% filter(ADDR == i) %>% select(RATE_HOUR)
PI%>%filter(ADDR)
PI%>%group_by(ADDR)%>%summarize()
PI
PI%>%group_by(ADDR)%>%select(c(CAPACITY,RATE_HOUR)) %>% summarise()
PI%>%group_by(ADDR)
PI%>%group_by(ADDR)
PI%>%group_by('ADDR')
PI%>%group_by(ADDR, PAY_NM)
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(mean)
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(mean = mean(CAPACITY))
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = mean(RATE_HOUR))
info_by_ADDR = PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = mean(RATE_HOUR))
info_by_ADDR
info_by_ADDR = PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR)))
info_by_ADDR
left_join(info_by_ADDR, population_info, by = ADDR)
left_join(info_by_ADDR, population_info, by = 'ADDR')
PI[is.na(RATE_HOUR),]
#시간당 금액 산출
PI %>% filter(PAY_NM=='유료') %>% filter(ADD_RATES==0) -> tmp
tmp$ADD_RATES = tmp$RATES
tmp$ADD_TIME_RATE = tmp$TIME_RATE
PI = rbind(tmp,PI)
PI = PI[!duplicated(PI$PARKING_CODE),]
#누락된 데이터 추가 http://parking.seoul.go.kr/web/MapMain.aspx
PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE==c(173141, 171802),]$RATES
PI[PI$PARKING_CODE==c(173141, 171802),]$TIME_RATE = PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_TIME_RATE
PI[PI$PARKING_CODE==171802,]$TIME_RATE = 120
PI[PI$PARKING_CODE==171802,]$ADD_TIME_RATE = 120
PI[PI$PARKING_CODE==171802,]$ADD_RATES = 2000
PI[PI$PARKING_CODE==173141,]$TIME_RATE = 5
PI[PI$PARKING_CODE==173141,]$ADD_TIME_RATE = 5
PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
RATE_HOUR[is.nan(RATE_HOUR)] = 0
detach(PI)
PI = cbind(PI[,-1],RATE_HOUR)
PI[is.na(RATE_HOUR),]
library(xlsx)
population = read.xlsx2('./OctagonExcel.xls', 1, encoding = 'utf-8')
pop_info = population[,2:7] %>% filter(동=='소계')%>%select(-동)
colnames(pop_info) = c('ADDR', 'HOUSEHOLD', 'POPULATION', 'MALE', 'FEMALE')
write.csv(pop_info, 'Population_information.csv')
population_info = read.csv('Population_information.csv')[-1]
population_info
info_by_ADDR = PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR)))
info_by_ADDR
PI
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)
PI
PI%>%group_by(ADDR)
PI%>%group_by(ADDR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR)))
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)
library(httr)
library(rvest)
library(dplyr)
#setwd('./final_proj')
key = '6b46504b456b6f6f313130734d624851'
parking_info = data.frame()
for (i in 0:9){
start_num = i*1000+1
url = paste0('http://openapi.seoul.go.kr:8088/',
key,
'/xml/SearchParkingInfo/',
start_num,
'/',
start_num+999)
url_get = GET(url)
url_xml = read_xml(url_get)
item_list = xml_nodes(url_xml, 'row')
item_list = lapply(item_list, function(x) return(xml_text(xml_children(x))))
item_dat = do.call('rbind',item_list)
item_dat = data.frame(item_dat, stringsAsFactors = F)
tmp = xml_nodes(url_xml, 'row')
colnames_dat = html_name(xml_children(tmp[[1]]))
colnames(item_dat) = colnames_dat
parking_info = rbind(parking_info ,item_dat[!duplicated(item_dat$PARKING_CODE),])
parking_info = parking_info[!duplicated(parking_info$PARKING_CODE),]
print(i)
}
parking_info_summarized = parking_info[c(1:3, 7, 8, 21, 22, 24:27)]
parking_info_summarized = parking_info[c(1:3, 7, 8, 21, 22, 24:27)]
write.csv(parking_info_summarized, 'parking_info.csv')
PI = read.csv('parking_info.csv')
PI
#지역정보 필터링
PI$ADDR = as.factor(gsub('구 [가-힣0-9a-zA-Z ()~-]*', '구', PI$ADDR))
#시간당 금액 산출
PI %>% filter(PAY_NM=='유료') %>% filter(ADD_RATES==0) -> tmp
tmp$ADD_RATES = tmp$RATES
tmp$ADD_TIME_RATE = tmp$TIME_RATE
PI = rbind(tmp,PI)
PI = PI[!duplicated(PI$PARKING_CODE),]
#누락된 데이터 추가 http://parking.seoul.go.kr/web/MapMain.aspx
PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE==c(173141, 171802),]$RATES
PI[PI$PARKING_CODE==c(173141, 171802),]$TIME_RATE = PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_TIME_RATE
PI[PI$PARKING_CODE==171802,]$TIME_RATE = 120
PI[PI$PARKING_CODE==171802,]$ADD_TIME_RATE = 120
PI[PI$PARKING_CODE==171802,]$ADD_RATES = 2000
PI[PI$PARKING_CODE==173141,]$TIME_RATE = 5
PI[PI$PARKING_CODE==173141,]$ADD_TIME_RATE = 5
PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
RATE_HOUR[is.nan(RATE_HOUR)] = 0
detach(PI)
PI = cbind(PI[,-1],RATE_HOUR)
PI
library(xlsx)
population = read.xlsx2('./OctagonExcel.xls', 1, encoding = 'utf-8')
pop_info = population[,2:7] %>% filter(동=='소계')%>%select(-동)
colnames(pop_info) = c('ADDR', 'HOUSEHOLD', 'POPULATION', 'MALE', 'FEMALE')
write.csv(pop_info, 'Population_information.csv')
population_info = read.csv('Population_information.csv')[-1]
population_info
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR)))
info_by_ADDR = PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR)))
left_join(info_by_ADDR, population_info, by = 'ADDR')
PI = read.csv('parking_info.csv')
#지역정보 필터링
PI$ADDR = as.factor(gsub('구 [가-힣0-9a-zA-Z ()~-]*', '구', PI$ADDR))
#시간당 금액 산출
PI %>% filter(PAY_NM=='유료') %>% filter(ADD_RATES==0) -> tmp
tmp$ADD_RATES = tmp$RATES
tmp$ADD_TIME_RATE = tmp$TIME_RATE
PI = rbind(tmp,PI)
PI = PI[!duplicated(PI$PARKING_CODE),]
#누락된 데이터 추가 http://parking.seoul.go.kr/web/MapMain.aspx
#PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE==c(173141, 171802),]$RATES
#PI[PI$PARKING_CODE==c(173141, 171802),]$TIME_RATE = PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_TIME_RATE
#PI[PI$PARKING_CODE==171802,]$TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_RATES = 2000
#PI[PI$PARKING_CODE==173141,]$TIME_RATE = 5
#PI[PI$PARKING_CODE==173141,]$ADD_TIME_RATE = 5
#PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
RATE_HOUR[is.nan(RATE_HOUR)] = 0
detach(PI)
PI = cbind(PI[,-1],RATE_HOUR)
PI
PI[is.na(RATE_HOUR),]
#시간당 금액 산출
PI %>% filter(PAY_NM=='유료') %>% filter(ADD_RATES==0) -> tmp
tmp$ADD_RATES = tmp$RATES
tmp$ADD_TIME_RATE = tmp$TIME_RATE
PI = rbind(tmp,PI)
PI = PI[!duplicated(PI$PARKING_CODE),]
#누락된 데이터 추가 http://parking.seoul.go.kr/web/MapMain.aspx
PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE==c(173141, 171802),]$RATES
PI[PI$PARKING_CODE==c(173141, 171802),]$TIME_RATE = PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_TIME_RATE
#PI[PI$PARKING_CODE==171802,]$TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_RATES = 2000
#PI[PI$PARKING_CODE==173141,]$TIME_RATE = 5
#PI[PI$PARKING_CODE==173141,]$ADD_TIME_RATE = 5
PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
RATE_HOUR[is.nan(RATE_HOUR)] = 0
detach(PI)
PI = cbind(PI[,-1],RATE_HOUR)
PI[is.na(RATE_HOUR),]
PI = read.csv('parking_info.csv')
#지역정보 필터링
PI$ADDR = as.factor(gsub('구 [가-힣0-9a-zA-Z ()~-]*', '구', PI$ADDR))
#시간당 금액 산출
PI %>% filter(PAY_NM=='유료') %>% filter(ADD_RATES==0) -> tmp
tmp$ADD_RATES = tmp$RATES
tmp$ADD_TIME_RATE = tmp$TIME_RATE
PI = rbind(tmp,PI)
PI = PI[!duplicated(PI$PARKING_CODE),]
#누락된 데이터 추가 http://parking.seoul.go.kr/web/MapMain.aspx
PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE==c(173141, 171802),]$RATES
PI[PI$PARKING_CODE==c(173141, 171802),]$TIME_RATE = PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_TIME_RATE
#PI[PI$PARKING_CODE==171802,]$TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_RATES = 2000
#PI[PI$PARKING_CODE==173141,]$TIME_RATE = 5
#PI[PI$PARKING_CODE==173141,]$ADD_TIME_RATE = 5
PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
RATE_HOUR[is.nan(RATE_HOUR)] = 0
detach(PI)
PI = cbind(PI[,-1],RATE_HOUR)
PI[is.na(RATE_HOUR),]
PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE==c(173141, 171802),]$RATES
PI[PI$PARKING_CODE==c(173141, 171802),]$TIME_RATE = PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_TIME_RATE
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
detach(PI)
PI[is.na(RATE_HOUR),]
PI = read.csv('parking_info.csv')
#지역정보 필터링
PI$ADDR = as.factor(gsub('구 [가-힣0-9a-zA-Z ()~-]*', '구', PI$ADDR))
#시간당 금액 산출
PI %>% filter(PAY_NM=='유료') %>% filter(ADD_RATES==0) -> tmp
tmp$ADD_RATES = tmp$RATES
tmp$ADD_TIME_RATE = tmp$TIME_RATE
PI = rbind(tmp,PI)
PI = PI[!duplicated(PI$PARKING_CODE),]
#누락된 데이터 추가 http://parking.seoul.go.kr/web/MapMain.aspx
PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE==c(173141, 171802),]$RATES
PI[PI$PARKING_CODE==c(173141, 171802),]$TIME_RATE = PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_TIME_RATE
#PI[PI$PARKING_CODE==171802,]$TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_RATES = 2000
#PI[PI$PARKING_CODE==173141,]$TIME_RATE = 5
#PI[PI$PARKING_CODE==173141,]$ADD_TIME_RATE = 5
PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
RATE_HOUR[is.nan(RATE_HOUR)] = 0
detach(PI)
PI = cbind(PI[,-1],RATE_HOUR)
PI[is.na(RATE_HOUR),]
PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE==c(173141, 171802),]$RATES
PI[PI$PARKING_CODE==c(173141, 171802),]$TIME_RATE = PI[PI$PARKING_CODE==c(173141, 171802),]$ADD_TIME_RATE
PI[is.na(RATE_HOUR),]
PI[PI$PARKING_CODE==c(173141, 171802),]$RATES
PI[PI$PARKING_CODE==c(173141, 171802),]
PI$PARKING_CODE==c(173141, 171802)
PI$PARKING_CODE%in%c(173141, 171802)
PI[PI$PARKING_CODE%in%c(173141, 171802),]$ADD_RATES
PI[PI$PARKING_CODE%in%c(173141, 171802),]$RATES
PI = read.csv('parking_info.csv')
#지역정보 필터링
PI$ADDR = as.factor(gsub('구 [가-힣0-9a-zA-Z ()~-]*', '구', PI$ADDR))
#시간당 금액 산출
PI %>% filter(PAY_NM=='유료') %>% filter(ADD_RATES==0) -> tmp
tmp$ADD_RATES = tmp$RATES
tmp$ADD_TIME_RATE = tmp$TIME_RATE
PI = rbind(tmp,PI)
PI = PI[!duplicated(PI$PARKING_CODE),]
#누락된 데이터 추가 http://parking.seoul.go.kr/web/MapMain.aspx
PI[PI$PARKING_CODE%in%c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE%in%c(173141, 171802),]$RATES
PI[PI$PARKING_CODE%in%c(173141, 171802),]$TIME_RATE = PI[PI$PARKING_CODE%in%c(173141, 171802),]$ADD_TIME_RATE
#PI[PI$PARKING_CODE==171802,]$TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_RATES = 2000
#PI[PI$PARKING_CODE==173141,]$TIME_RATE = 5
#PI[PI$PARKING_CODE==173141,]$ADD_TIME_RATE = 5
PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
RATE_HOUR[is.nan(RATE_HOUR)] = 0
detach(PI)
PI = cbind(PI[,-1],RATE_HOUR)
PI[is.na(RATE_HOUR),]
PI = read.csv('parking_info.csv')
#지역정보 필터링
PI$ADDR = as.factor(gsub('구 [가-힣0-9a-zA-Z ()~-]*', '구', PI$ADDR))
#시간당 금액 산출
PI %>% filter(PAY_NM=='유료') %>% filter(ADD_RATES==0) -> tmp
tmp$ADD_RATES = tmp$RATES
tmp$ADD_TIME_RATE = tmp$TIME_RATE
PI = rbind(tmp,PI)
PI = PI[!duplicated(PI$PARKING_CODE),]
#누락된 데이터 추가 http://parking.seoul.go.kr/web/MapMain.aspx
PI[PI$PARKING_CODE%in%c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE%in%c(173141, 171802),]$RATES
PI[PI$PARKING_CODE%in%c(173141, 171802),]$ADD_TIME_RATE = PI[PI$PARKING_CODE%in%c(173141, 171802),]$TIME_RATE
#PI[PI$PARKING_CODE==171802,]$TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_RATES = 2000
#PI[PI$PARKING_CODE==173141,]$TIME_RATE = 5
#PI[PI$PARKING_CODE==173141,]$ADD_TIME_RATE = 5
PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
RATE_HOUR[is.nan(RATE_HOUR)] = 0
detach(PI)
PI = cbind(PI[,-1],RATE_HOUR)
PI[is.na(RATE_HOUR),]
library(xlsx)
population = read.xlsx2('./OctagonExcel.xls', 1, encoding = 'utf-8')
pop_info = population[,2:7] %>% filter(동=='소계')%>%select(-동)
colnames(pop_info) = c('ADDR', 'HOUSEHOLD', 'POPULATION', 'MALE', 'FEMALE')
write.csv(pop_info, 'Population_information.csv')
population_info = read.csv('Population_information.csv')[-1]
population_info
info_by_ADDR = PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR)))
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR)))
info_by_ADDR
left_join(info_by_ADDR, population_info, by = 'ADDR')
library(xlsx)
population = read.xlsx2('./OctagonExcel.xls', 1, encoding = 'utf-8')
pop_info = population[,2:5] %>% filter(동=='소계')%>%select(-동)
colnames(pop_info) = c('ADDR', 'HOUSEHOLD', 'POPULATION', 'MALE', 'FEMALE')
colnames(pop_info) = c('ADDR', 'HOUSEHOLD', 'POPULATION')
write.csv(pop_info, 'Population_information.csv')
population_info = read.csv('Population_information.csv')[-1]
population_info
info_by_ADDR = PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR)))
left_join(info_by_ADDR, population_info, by = 'ADDR')
PI_by_ADDR = PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR)))
info_by_ADDR = left_join(info_by_ADDR, population_info, by = 'ADDR')
info_by_ADDR
info_by_ADDR = left_join(PI_by_ADDR, population_info, by = 'ADDR')
info_by_ADDR
info_by_ADDR %>% mutate(CAPA_HOUSE = CAPA/HOUSEHOLD, CAPA_POP = CAPA/POPULATION)
info_by_ADDR = info_by_ADDR %>% mutate(CAPA_HOUSE = CAPA/HOUSEHOLD, CAPA_POP = CAPA/POPULATION)
info_by_ADDR
library(sp); library(gstat); library(automap);
skorea <- getData(name ="GADM", country= "KOR", level=2)
library(raster)
skorea <- getData(name ="GADM", country= "KOR", level=2)
head(skorea,2)
head(skorea@polygons[[1]]@Polygons[[1]]@coords)
skorea@polygons[[1]]
skorea@polygons[[1]]@Polygons[[1]]
fortify(skorea)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group)
ggplot() + geom_map(data= skorea, map= skorea,
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black")
skorea = fortify(skorea)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black")
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=seoul032823, aes(LON, LAT, col = PM10),alpha=0.7)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=info_by_ADDR, aes(LON, LAT, col = CAPA)
ggplot() + geom_map(data= skorea, map= skorea,
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=info_by_ADDR, aes(LON, LAT, col = CAPA),alpha=0.7) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude", size="PM10(microgm/m3)")
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=info_by_ADDR, aes(LNG, LAT, col = CAPA),alpha=0.7)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=PI, aes(LNG, LAT, col = CAPA),alpha=0.7)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=PI, aes(LNG, LAT, col = CAPACITY),alpha=0.7)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=PI, aes(LNG, LAT, col = CAPACITY),alpha=0.7) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude", size="PM10(microgm/m3)")
skorea
getData(name ="GADM", country= "KOR")
getData(name ="GADM", country= "KOR", level=2)
skorea
skorea <- getData(name ="GADM", country= "KOR", level=2)
skorea
fortify(skorea)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=ADDR, colour="black") +
geom_point(data=PI, aes(LNG, LAT, col = CAPACITY),alpha=0.7) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude", size="PM10(microgm/m3)")
ADDR
ADDR
PI$ADDR
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=PI$ADDR, colour="black") +
geom_point(data=PI, aes(LNG, LAT, col = CAPACITY),alpha=0.7) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude", size="PM10(microgm/m3)")
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=rainbow(25), colour="black") +
geom_point(data=PI, aes(LNG, LAT, col = CAPACITY),alpha=0.7) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude", size="PM10(microgm/m3)")
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=PI, aes(LNG, LAT, col = CAPACITY),alpha=0.7) +
labs(title= "PM10 Concentration in Seoul Area at South Korea",
x="Longitude", y= "Latitude", size="PM10(microgm/m3)")
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black")
skorea = fortify(skorea)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=NA, colour="black") +
geom_point(data=PI, aes(LNG, LAT, col = CAPACITY),alpha=0.7)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=rainbow(25), colour="black") +
geom_point(data=PI, aes(LNG, LAT, col = CAPACITY),alpha=0.7)
ggplot() + geom_map(data= skorea, map= skorea,
aes(map_id=id,group=group),fill=rainbow(25)) +
geom_point(data=PI, aes(LNG, LAT, col = CAPACITY),alpha=0.7)
PI
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)%>%summarise(CAPA = sum(CAPACITY), RATE = as.integer(mean(RATE_HOUR[RATE_HOUR!=0])))
PI%>%group_by(ADDR)%>%select(CAPACITY,RATE_HOUR)
as.integer(mean(RATE_HOUR[RATE_HOUR!=0]))
info_by_ADDR %>% arrange(RATE)
info_by_ADDR %>% arrange(desc(RATE))
info_by_ADDR %>% arrange(desc(CAPA))
info_by_ADDR %>% arrange(desc(CAPA_HOUSE))
info_by_ADDR %>% arrange(desc(CAPA_HOUSE)) %>% head(,5)
info_by_ADDR %>% arrange(desc(CAPA_HOUSE)) %>% head(5)
info_by_ADDR %>% arrange(desc(CAPA_POP)) %>% head(5)
info_by_ADDR %>% arrange(desc(CAPA_POP)) %>% head(5)
info_by_ADDR %>% arrange(desc(CAPA_POP)) %>% tail(5)
info_by_ADDR %>% arrange(desc(CAPA_HOUSE)) %>% head(5)
info_by_ADDR %>% arrange(desc(CAPA_HOUSE)) %>% tail(5)
info_by_ADDR %>% arrange(desc(CAPA_HOUSE)) %>% head(5)
info_by_ADDR %>% arrange(desc(CAPA_HOUSE)) %>% tail(5)
library(xlsx)
vehicle = read.xlsx2('./vehicle.xls', 1, encoding = 'utf-8')
vehicle
vehicle[-1,c(2:4,8)]
vehicle = vehicle[c(-1,-2),c(2:4,8)]
colnames(vehicle)
colnames(vehicle) = c('ADDR', 'CAPACITY', 'RATIO')
vehicle[1:2]
left_join(info_by_ADDR,vehicle[1:2], by = 'ADDR')
vehicle = read.xlsx2('./vehicle.xls', 1, encoding = 'utf-8')
vehicle[c(-1,-2),c(2:4,8)]
vehicle = vehicle[c(-1,-2),c(2:4,8)]
colnames(vehicle)
colnames(vehicle) = c('ADDR', 'REGISTERED','CAPACITY', 'RATIO')
left_join(info_by_ADDR,vehicle[1:2], by = 'ADDR')
vehicle
library(httr)
library(rvest)
library(dplyr)
#setwd('./final_proj')
key = '6b46504b456b6f6f313130734d624851'
parking_info = data.frame()
for (i in 0:9){
start_num = i*1000+1
url = paste0('http://openapi.seoul.go.kr:8088/',
key,
'/xml/SearchParkingInfo/',
start_num,
'/',
start_num+999)
url_get = GET(url)
url_xml = read_xml(url_get)
item_list = xml_nodes(url_xml, 'row')
item_list = lapply(item_list, function(x) return(xml_text(xml_children(x))))
item_dat = do.call('rbind',item_list)
item_dat = data.frame(item_dat, stringsAsFactors = F)
tmp = xml_nodes(url_xml, 'row')
colnames_dat = html_name(xml_children(tmp[[1]]))
colnames(item_dat) = colnames_dat
parking_info = rbind(parking_info ,item_dat[!duplicated(item_dat$PARKING_CODE),])
parking_info = parking_info[!duplicated(parking_info$PARKING_CODE),]
print(i)
}
parking_info_summarized = parking_info[c(1:3, 7, 8, 21, 22, 24:27)]
parking_info_summarized = parking_info[c(1:3, 7, 8, 21, 22, 24:27)]
write.csv(parking_info_summarized, 'parking_info.csv')
PI = read.csv('parking_info.csv')
#지역정보 필터링
PI$ADDR = as.factor(gsub('구 [가-힣0-9a-zA-Z ()~-]*', '구', PI$ADDR))
#시간당 금액 산출
PI %>% filter(PAY_NM=='유료') %>% filter(ADD_RATES==0) -> tmp
tmp$ADD_RATES = tmp$RATES
tmp$ADD_TIME_RATE = tmp$TIME_RATE
PI = rbind(tmp,PI)
PI = PI[!duplicated(PI$PARKING_CODE),]
#누락된 데이터 추가 http://parking.seoul.go.kr/web/MapMain.aspx
PI[PI$PARKING_CODE%in%c(173141, 171802),]$ADD_RATES = PI[PI$PARKING_CODE%in%c(173141, 171802),]$RATES
PI[PI$PARKING_CODE%in%c(173141, 171802),]$ADD_TIME_RATE = PI[PI$PARKING_CODE%in%c(173141, 171802),]$TIME_RATE
#PI[PI$PARKING_CODE==171802,]$TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_TIME_RATE = 120
#PI[PI$PARKING_CODE==171802,]$ADD_RATES = 2000
#PI[PI$PARKING_CODE==173141,]$TIME_RATE = 5
#PI[PI$PARKING_CODE==173141,]$ADD_TIME_RATE = 5
PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
PI[PI$PARKING_CODE==1010089,]$TIME_RATE = 0
PI[PI$PARKING_CODE==1010089,]
View(PI)
PI[is.na(RATE_HOUR),]
attach(PI)
RATE_HOUR = RATES+ADD_RATES*(60-TIME_RATE)/ADD_TIME_RATE
RATE_HOUR[is.nan(RATE_HOUR)] = 0
detach(PI)
PI = cbind(PI[,-1],RATE_HOUR)
PI[is.na(RATE_HOUR),]
library(xlsx)
population = read.xlsx2('./population.xls', 1, encoding = 'utf-8')
pop_info = population[,2:5] %>% filter(동=='소계')%>%select(-동)
population[,2:5] %>% filter(동=='소계')
population[,2:5] %>% filter(동=='소계')%>%select(-동)
pop_info = population[,2:5] %>% filter(동=='소계') %>% select(-동)
population[,2:5]
pop_info = population[,2:5]
colnames(pop_info) = c('ADDR', 'X','HOUSEHOLD', 'POPULATION')
pop_info %>% filter(X=='소계') %>% select(-X)
detach("package:bindrcpp", unload=TRUE)
