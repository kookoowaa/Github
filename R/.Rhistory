sampleBy(~Species,frac=0.1,data=x)
?frac
?frac=0.1
?frac
split.data.frame(x)
split.data.fram
?split.data.frame
?split
split(~species,x)
split(iris,iris$Species)
c<-split(iris,iris$Species)
c
lapply(split(iris,iris$Species),mean)
lapply(split(iris,iris$Species),mean,na.rm=T)
str(split(iris,iris$Species))
subset(iris,Species=="setosa" &Sepal.Length>5)
subset(iris,Species=="setosa")
subset(iris,select=c(Sepal.Length,Species))
subset(iris,select=c(Sepal.Length,Species))
subset(iris,Species=="setosa")
mean(subset(iris,Species=="setosa"))
iris[,names(iris) %in% c("Sepal.Length","Species")]
iris[,!names(iris) %in% c("Sepal.Length","Species")]
mean(subset(iris,Species=="setosa"))
apply(subset(iris,Species=="setosa"),1,mean)
apply(subset(iris,Species=="setosa"),2,mean)
apply(subset(iris,Species=="setosa"),2,mean,na.rm=T)
?na.rm
?NA.rm
?rm.na
?rm.NA
rowMeans(subset(iris,Species=="setosa"))
?rowMeans
?rowMeans(c[,1:5])
rowMeans(c[,1:5])
c
rowMeans(c[,1:3])
rowMeans(c)
rowMeans(x)
x
rowMeans(x[1:3])
colMeans(x[1:#])
colMeans(x[1:3])
colMeans(subset(iris,Species=="setosa"))
subset(iris,Species=="setosa")
colMeans(subset(iris,Species=="setosa")[,1:4])
y<-data.frame(name=c("c","b","a"),eng=c(6:8))
x<-data.frame(name=c("a","b","c"),math=c(1,2,3))
merge(x,y)
cbind(x,y)
merge(x,y,all=T)
y<-data.frame(name=c("c","b","d"),eng=c(6:8))
merge(x,y)
merge(x,y,all=T)
a<-c(10,20,15,17,19)
sort(a)
sort(a,decreasing=T)
order(a)
a
a
iris[order$Sepal.Length,]
iris[order(iris$Sepal.Length),]
a
order)a
order(a)
sort(a)
iris[order(iris$Sepal.Length,iris$Sepal.Width),]
colMeans(iris[1:3])
?with
print(mean(iris$Petal.Length))
with(iris,{
print(mean(Sepal.Lenght))
print(mean(Sepal.Width))
})
with(iris,{
print(mean(Sepal.Length))
print(mean(Sepal.Width))
})
x<-data.frame(val=c(1,2,3,4,NA,5,NA))
within(x,{
var<-ifelse(is.na(val),meadian(val,na.rm=T))
})
within(x,{
val<-ifelse(is.na(val),meadian(val,na.rm=T))
})
within(x,{
val<-ifelse(is.na(val),meadian(val,na.rm=T),val)
})
within(x,{
val<-ifelse(is.na(val),median(val,na.rm=T),val)
})
x$val[is.na(x$val)]<-median(x$val,na.rm=T)
x$val[is.na(x$val)]<-median(x$val,na.rm=T)
x
x<-data.frame(val=c(1,2,3,4,NA,5,NA))
median(x$val,na.rm=T)
data("iris")
iris[1,1]=NA
iris
iris
median_per_spec<-sapply(split(iris$Sepal.Length,iris$Species),median, na.rm=T)
median_per_spec
split(iris$Sepal.Length,iris$Species)
ifelse(is.na(iris$Sepal.Length),median_per_spec,iris$Sepal.Length)
iris<-within(iris,{
Sepal.Length<-ifelse(is.na(Sepal.Length),median_per_spec[species],Sepal.Length)})
iris<-within(iris,{
Sepal.Length<-ifelse(is.na(Sepal.Length),median_per_spec[species],Sepal.Length)
})
iris<-within(iris,{
Sepal.Length<-ifelse(is.na(Sepal.Length),median_per_spec[Species],Sepal.Length)
})
attach(iris)
Sepal.Length
search()
Sepal.Width[1]=-1
Sepal.Width
detach(iris)
hea(iris)
head(iris)
install.packages("modeest")
n = 64
xbar = 27.75
s = 5.083
?qt
qt(1-0.005, n-1)
?t.test()
bulb = c(2000,1975,1900,2000,1950,1850,1950,2100,1975)
t.test(bulb)
summary(bulb)
xbar = 1966.67
s = 69.6
#(xbar-1967)/
(xbar-1967)/(s/sqrt(8))
t.test(1950,bulb)
t.test(bulb, 1950)
qnorm
?qnorm
qnorm(0.05,1966.67,69.6)
qnorm(0.05,1966.67,69.6, lower.tail = F)
?qt
qt(0.05,8)
qt(0.05,8,lower.tail = T)
qt(0.05,8,lower.tail = F)
?t.test
t.test(bulb,mu=1950, alternative = greater)
t.test(bulb,mu=1950, alternative = "greater")
mu = 0.6
xbar = 0.62
s = 0.11
n = 120
a = 0.05
t0 = (xbar-mu)/(s/sqrt(n))
t0
qt(a/2,n-1)
qt(a/2,n-1, lower.tail = F)
qt(a/2,n-1, lower.tail = F) == t0
qt(a/2,n-1, lower.tail = F) < t0
?pt
pt(t0,n-1,lower.tail = F)
drug = c(0.8, -.2, 0.6 , 0 , -.3, .3)
drug
summary(drug)
t.test(drug, mu = 0)
sd(drug)
t0 = (0.2-0)/(sd(drug)/sqrt(6))
t0
t0 - qt(0.025,5)
t0+qt(0.025,5)
qt(0.025,5)*sd(drug)/sqrt(6)
cow = c(12.3,32.0,10.9,20,6.6,23.3,14,9)
cow = c(12.3,32.0,10.9,20,6.6,23.3,14,9.2,4.7,11,8)
cow
summary(cow)
t.test(cow)
qt(0.99,10)
t.test(cow,conf.level = 0.01)
t.test(cow,conf.level = 0.99)
pt(0.01,10)
pt(13.82/(sd(cow)/sqrt(11)),10)
?qnorm
qnorm(0.05,0,sqrt((2*15^2)/6))
qnorm(0.05,0,sqrt((2*15^2)/6),lower.tail = F)
qt(0.05,7.8)
qt(1-0.05,7.8)
pnorm(0.01)
pnorm(0.01,lower.tail = F)
qnorm(0.01,lower.tail = F)
small = c(6, 27, 19)
compact = small
small = c(8, 36, 17)
medium= c(21, 45, 33)
large= c(14, 18, 6)
c_table = rbind(c(compact, small, medium, large)
)
c_table
c_table = rbind(compact, small, medium, large)
c_table
chisq.test(c_table)
chisq.test(c_table)$observed
chisq.test(c_table)$expected
setwd("d:/Github/R")
rm(list=ls())
gc()
a <- (c(1,2,3,4,NA))
a
a<- a*3
a
a <- rep(a)
a
a <- rep(a, times = 3)
a
a[NA]
a
a[if(NA)]
a[=NA]
a[is.na(a)]
a[is.na(a)] <- 1
a
a[a%%2=0]
a[a%%2==0]
where 2
where 2 in a
?where
?which
a[which(a)]
which(a)
subset(a,a<3)
?index
?is.index
?which
?where
which(a>3)
a(whicha>3)
a[which(a>3)]
a[a>3]
subset(a,a>3)
A <- matrix (c(1:9),3,3)
A
B <- matrix(9:1, 3,3)
B
A+B
2*A
solve(A)
A
install.packages(pixmap)
install.packages('pixmap')
mtrush1 <- read.pnm('./visualization.mtrush1.pgm')
library(pixmap)
mtrush1 <- read.pnm('./visualization.mtrush1.pgm')
mtrush1 <- read.pnm('./visualization/mtrush1.pgm')
mtrush1
plot(mtrush1)
str(mtrush1)
locator
locator()
x<-mtrush1
x
x@grey[20:80, 20:80] <-1
plot(x)
x<-mtrush1
locator()
x@grey[200:240, 90:50] <-1
x@grey[50:90, 200:240] <-1
plot(x)
x<-mtrush1
y1 <- x@grey[50:90, 200:240]
y1
t = 0.8
x@grey[50:90, 200:240] <- t*y1 + (1-t)*matrix(runif(length(y1)),nrow(y1), ncol(y1))
plot(x)
x <- matrix(c(1,2,3,2,3,4),3,2)
x
x[x[,2]>=3,]
x[,2]>=3
one = rep(1,4)
one
z = matrix(0,4,2)
z
cbind(z,one)
z = cbind(z,one)
z
z[,3]
z[,4]= rep(2,4)
attributes (z)
z$dim
attributes (z)$dim
attributes (z)$dim <- c(3,3)
attributes (z)$dim <- c(2,6)
x
y1
mtrush1@grey
x<-mtrush1@grey
x
View(x)
j = list(names = 'joe', salary = 55000, union = T)
j
j$salary
j
x = unlist(j)
x
str(j)
str(x)
kids <- c('jack','Jill')
ages = c(12,33)
df = data.frame(kids,ages)
df
kids
str(df)
df$kids <- as.factor(df$kids)
df
str(df)
df$kids <- as.character(df$kids)
df
str(df)
f1.layer.list = vector('list', length = length(pn.num))
pn.num = c(1:2)
f1.layer.list = vector('list', length = length(pn.num))
f1.layer.list
layer.list = list(length = length(pn.num))
layer.list
?vector
str(layer.list)
layer.list = list(for (i in pn.num))
layer.list = list(for (i in pn.num) i)
layer.list
layer.list = list(for (i in length(pn.num) i)
layer.list = list(for (i in length(pn.num) i)
layer.list = list(for (i in length(pn.num)) i)
layer.list
layer.list = list(for (i in length(pn.num)) layer.list$i)
layer.list
layer.list = list(for (i in length(pn.num)) layer.list[[i]])
require(RcmdrPlugin.IPSUR)
library("RcmdrPlugin.IPSUR", lib.loc="~/R/win-library/3.4")
RcmdrTestDrive
summary(RcmdrTestDrive)
table(RcmdrTestDrive)
table(RcmdrTestDrive$gender)
TD = RcmdrTestDrive
summary(TD$salary by=gender)
summary(TD$salary, by=gender)
summary(TD$salary, which(TD$gender))
summary(TD$salary, which(TD$gender = 'Female'))
summary(TD$salary, which(TD$gender == 'Female'))
summary(TD$salary, which(TD$gender == 'Male'))
summary(TD$salary[TD$gender == 'Male'])
summary(TD$salary[TD$gender == 'Female'])
apply(mean,TD$salary)
apply('mean',TD$salary)
?apply
apply(TD$salary,2,mean)
apply(TD$salary,1,mean)
?sapply
?mapply
?lapply
?tapply
plot(summary(TD$salary[TD$gender == 'Male']))
hist(summary(TD$salary[TD$gender == 'Male']))
hist(summary(TD$salary[TD$gender == 'Male']),summary(TD$salary[TD$gender == 'Female']))
?hist
plot.histogram
plot(summary(TD$salary[TD$gender == 'Male']))
hist(TD$salary, by=TD$gender)
boxplot(TD$salary)
boxplot(TD$salary, by= TD$gender)
boxplot(TD$salary, by= TD$gender)
boxplot(TD$salary[TD$gender=='Male'])
boxplot(TD$salary[TD$gender=='Male'],TD$salary[TD$gender=="Female"])
boxplot(TD$salary[TD$gender=='Male'],TD$salary[TD$gender=="Female"], col = c('Male','Female'))
boxplot(TD$salary[TD$gender=='Male'],TD$salary[TD$gender=="Female"])
boxplot(TD$salary[TD$gender=='Male'],TD$salary[TD$gender=="Female"], names = c('Male','Female'))
?boxplot
?plot
?par
boxplot(TD$salary[TD$gender=='Male'],TD$salary[TD$gender=="Female"], names = c('Male','Female'), legend = T)
which(TD$salary=max)
which(TD$salary)
TD$salary[which.max(TD$salary)]
which.max(TD$salary)
which(TD$salary, max())
which(TD$salary = max())
which(TD$salary == max())
by(TD$salary, TD$gender, mean)
by(TD$salary, TD$gender, summary)
install.packages("prob")
library(prob)
library('prob')
tosscoin(2)
library("prob", lib.loc="~/R/win-library/3.4")
tosscoin(2)
require(prob)
gc()
require(prob)
tosscoin(2)
rolldie(2)
tosscoin(makespace = 1)
tosscoin(2, makespace = 1)
tosscoin(2, makespace = 2)
tosscoin(2, makespace)
tosscoin(2, makespace= 10)
urnsamples(6)
?urnsamples
rolldie(2)
rolldie(2)[x1+x2>8]
rolldie(2)[rolldie(2)x1+rolldie(2)x2>8]
rolldie(2)[rolldie(2)$x1+rolldie(2)$x2>8]
rolldie(2)[$x1+$x2>8]
rolldie(2)[1:2]
rolldie(2)[,rolldie(2)$x1+rolldie(2)x2>8]
rolldie(2)[,rolldie(2)$x1+rolldie(2)$x2>8]
df = rolldie(2)[,rolldie(2)$x1+rolldie(2)$x2>8]
df
df = rolldie(2)[rolldie(2)$x1+rolldie(2)$x2>8]
df
df = rolldie(2)
df$X1
which(df[1]+df[2]>8)
df([hich(df[1]+df[2]>8)]
df[which(df[1]+df[2]>8)]
df[which(df[1]+df[2]>8),]
df = rolldie(2,makespace=1)
df
df[which(df[1]+df[2]>8),]
subset(df,which(df[1]+df[2]>8))
subset(df,df[1]+df[2]>8)
df1 = subset(df,df[1]+df[2]>8)
sum(df1)
sum(df1$probs)
?makespace
?tosscoin
test = rolldie(2,makespace = T)
test
prob((test))
?prob
prob(test, event = x1+x2>8, given = x1==x2)
prob(test, event = 'x1'+'x2'>8, given = x1==x2)
prob(test, event = test[1]+test[2]>8, given = x1==x2)
prob(test, event = test[1]+test[2]>8, given = test[1]==test[2])
prob(test, given = test[1]+test[2]>8, event = test[1]==test[2])
seq(from = 3, to = 8, length = 3)
seq(from = 3, to = 8, length.out =  3)
letters(1:20)
letters[1:20]
letters
z = letters[1:20]
names(z)
names(z) <- 1:20
z
str(z)
z[1]
z['1']
z$1
z$'1'
a = 7.0
mode(a)
as.double(a)
a
mode(a)
a = as.double(a)
mode(a)
y = character('y')
y = 'character'
y
str(y)
str(a)
z = c('big', 'data')
z
paste(z)
past(z[1],z[2])
paste(z[1],z[2])
paste(z, 'bid')
paste(z, 'bid', sep='no')
paste(z, 'bid', sep='')
a ='appliedbda'
a
substr(a,1,3)
subset(a,1,3)
subset(a,'i')
subset(a='i')
subset(a=='i')
subset(a[]=='i')
mtcar
data()
Nile
iris
subset(iris,iris$Species=='virginica')
iris[iris$Species=='virginica,']
iris[iris$Species=='virginica',]
a = 1:6
b = matrix(a,3,2)
b
t(b)
a = list(b = 'dnfk', c = c(1,2,3), d= 3)
a
names(a)
names(a) <- letters(1:3)
names(a) <- letters[1:3]
a
e1 = c('wcup1', 'wbc')
e2 - matrix(c(2014,2018,2022,2006,2009,2013),3,2)
e2 = matrix(c(2014,2018,2022,2006,2009,2013),3,2)
e2
e3 = 10:1
e3
le = list (e1,e2,e3)
le
le = list(e1=e1,e2=e2,e3=e3)
le
le$e1
unlist(le)
names(unlist(le))
