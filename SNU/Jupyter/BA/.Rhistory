dongil
names(dongil) = c('x', 'y')
map1 = SeoulMap +
geom_point(aes(x = x, y = y), data = dongil, size = 1) +
coord_equal()
map1
dongil
map1 = SeoulMap +
geom_point(aes(x = y, y = x), data = dongil, size = 1) +
coord_equal()
map1 = SeoulMap +
geom_point(aes(x = y, y = x), data = dongil, size = 1) +
coord_equal()
map1
map1 = SeoulMap +
geom_point(aes(x = y, y = x), data = dongil, size =4) +
coord_equal()
map1
map1 = SeoulMap +
geom_point(aes(x = y, y = x), data = dongil, size =2) +
coord_equal()
map1
map1 = SeoulMap +
#geom_point(aes(x = y, y = x), data = dongil, size =2) +
geom_density2d(aes(x = y, y = x, alpha = 0), bins = 6, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#geom_point(aes(x = y, y = x), data = dongil, size =2) +
geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#geom_point(aes(x = y, y = x), data = dongil, size =2) +
geom_density2d(aes(x = y, y = x, alpha = 0), data = dongil) +
coord_equal()
map1
dongil = read.csv('동일로.csv')
dongil
names(dongil) = c('y', 'x')
map1 = SeoulMap +
geom_point(aes(x = y, y = x), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
geom_line(aes(x = x, y = y), data = dongil) +
#geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
arrange(desc(dongil), by = 'y')
arange(desc(dongil), by = 'y')
sort(desc(dongil), by = 'y')
desc(dongil)
dongil
sort(dongil, desc(y))
dongil = read.csv('동일로.csv')
names(dongil) = c('y', 'x')
sort(dongil, desc('y'))
arrange(dongil, desc(y))
dongil = arrange(dongil, desc(y))
map1 = SeoulMap +
geom_line(aes(x = x, y = y), data = dongil) +
#geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
dongil
map1 = SeoulMap +
geom_line(aes(x = x, y = y), data = dongil, size = 3) +
#geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
geom_line(aes(x = x, y = y), data = dongil, size = 2) +
#geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
geom_line(aes(x = x, y = y), data = dongil, size = 1) +
#geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
geom_line(aes(x = x, y = y), data = dongil, size = 1) +
#geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
map1
map1 = SeoulMap +
geom_line(aes(x = x, y = y), data = dongil, size = 1) +
#geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
dongil
map1 = SeoulMap +
geom_line(aes(y = y, x=x), data = dongil, size = 1) +
#geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#geom_line(aes(x = x, y = y), data = dongil, size = 1) +
geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
dongil = read.csv('동일로.csv')
names(dongil) = c('y', 'x')
dongil = arrange(dongil, desc(y))
map1 = SeoulMap +
geom_line(aes(x = x, y = y), data = dongil, size = 1) +
#geom_point(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
geom_point(aes(x = x, y = y), data = dongil, size =1) +
geom_path()
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
geom_point(aes(x = x, y = y), data = dongil, size =1) +
geom_path() +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
ggplot(aes(x = x, y = y), data = dongil, size =1)+
geom_point() +
geom_path() +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1 = SeoulMap +
ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point() +
geom_path() +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
map1
map1 = #SeoulMap +
ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point() +
geom_path() +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
map1
map1 = #SeoulMap +
ggplot(data = dongil, aes(x = x, y = y)) +
geom_point() +
geom_path() +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
map1
dongil = read.csv('동일로.csv')
names(dongil) = c('y', 'x')
dongil = arrange(dongil, desc(y))
map1 = SeoulMap +
ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point() +
geom_path() +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point() +
geom_path() +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point(aes(x = x, y = y), data = dongil, size =1) +
geom_path(aes(x = x, y = y), data = dongil, size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
#geom_point(aes(x = x, y = y), data = dongil, size =1) +
geom_path(aes(x = x, y = y), data = dongil, size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
#geom_point(aes(x = x, y = y), data = dongil, size =1) +
geom_path(aes(x = x, y = y), data = dongil, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
data = merge(data,coord, by = 'road_name')
library(xlsx)
data = read.xlsx('./data_set.xlsx', encoding = 'UTF-8', sheetIndex = 1)
library(xlsx)
setwd('d:/github/jupyter/BA')
data = read.xlsx('./data_set.xlsx', encoding = 'UTF-8', sheetIndex = 1)
coord = read.csv('./road_coord.csv')
coord = coord[,-1]
data = merge(data,coord, by = 'road_name')
View(coord)
library(xlsx)
setwd('d:/github/jupyter/BA')
data = read.xlsx('./data_set.xlsx', encoding = 'UTF-8', sheetIndex = 1)
coord = read.csv('./road_coord.csv')
coord = read.csv('./road_coord.csv', encoding = 'UTF-8')
coord = read.csv('road_coord.csv', encoding = 'UTF-8')
coord = read.csv('road_coord.csv', encoding = 'UTF-8')
coord
coord = read.csv('road_coord.csv')
coord
coord = read.csv('./road_coord.csv')
coord
coord = read.csv('./coordinates.csv')
library(xlsx)
setwd('d:/github/jupyter/BA')
data = read.xlsx('./data_set.xlsx', encoding = 'UTF-8', sheetIndex = 1)
coord = read.csv('./coordinates.csv', encoding = 'utf-8')
coord = read.csv('./coordinates.csv', encoding = 'utf-8')
coord
data
data = read.xlsx('./data_set.xlsx', encoding = 'UTF-8', sheetIndex = 1)
data
data = read.csv('./data_set.csv', encoding = 'UTF-8')
coord = read.csv('./coordinates.csv', encoding = 'utf-8')
data
data = read.csv('./data_set.csv', encoding = 'UTF-8')
data
data = read.xlsx('./data_set.xlsx', encoding = 'UTF-8', sheetIndex = 1)
data
coord
names(coord) = c('road_ID','Y','X')
library(xlsx)
setwd('d:/github/jupyter/BA')
data = read.xlsx('./data_set.xlsx', encoding = 'UTF-8', sheetIndex = 1)
coordinates = read.csv('./coordinates.csv', encoding = 'utf-8')
names(coordinates) = c('road_ID','Y','X')
coord_group = coordinates[1,]
coord_group
coordinates[coordinates$road_ID==data$road_ID,]
coordinates[coordinates$road_ID[-35,]==data$road_ID,]
coordinates[coordinates$road_ID[-35]==data$road_ID,]
coordinates$road_ID[-35]
coordinates[coordinates$road_ID==data$road_ID[-35],]
coordinates[coordinates$road_ID==3100012,]
coordinates[coordinates$road_ID==data$road_ID[-35],]
coord_group
for(i in c(1:34,36:44)){
rbind(coordinates[coordinates$road_ID==data$road_ID[i]])
}
for(i in c(1:34,36:44)){
rbind(coord_group, coordinates[coordinates$road_ID==data$road_ID[i]])
}
coordinates[coordinates$road_ID==data$road_ID[1],]
for(i in c(1:34,36:44)){
rbind(coord_group, coordinates[coordinates$road_ID==data$road_ID[i],])
}
coord_group
coordinates[coordinates$road_ID==data$road_ID,]
coordinates[coordinates$road_ID==data$road_ID[-35],]
coord_group = coordinates[1,]
coord_group
coordinates$road_ID==data$road_ID[-35]
coordinates[coordinates$road_ID in data$road_ID[-35],]
coordinates[(coordinates$road_ID in data$road_ID[-35]),]
coordinates$road_ID
data$road_ID[-35]
coordinates[(coordinates$road_ID == data$road_ID[-35]),]
grep(data$road_ID[-35],coordinates$road_ID )
c(1:34,36:44)
for(i in 1:44){
rbind(coord_group, coordinates[coordinates$road_ID==data$road_ID[i],])
}
coord_group
data$road_ID[i]
coordinates$road_ID==data$road_ID[i]
for(i in 1:44){
coord_group = rbind(coord_group, coordinates[coordinates$road_ID==data$road_ID[i],])
}
coord_group
coord_group = coordinates[1,]
for(i in c(1:34,36:44){
for(i in c(1:34,36:44)){
coord_group = rbind(coord_group, coordinates[coordinates$road_ID==data$road_ID[i],])
}
coord_group
coordinates[1,]
coord_group = coord_group[-1,]
coord_group
library(ggmap)
library(RColorBrewer)
# 서울 기준 open street map 호출
SeoulMap = qmap("seoul", zoom = 11, scale = 4, maptype = "toner-lite", source= 'stamen', legend = "topleft", extent = 'device', size = c(1280,1280))
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
#geom_point(aes(x = x, y = y), data = dongil, size =1) +
geom_path(aes(x = x, y = y), data = coord_group, group=road_ID, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
#geom_point(aes(x = x, y = y), data = dongil, size =1) +
geom_path(aes(x = X, y = Y), data = coord_group, group = road_ID, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point(aes(x = X, y = Y), data = coord_group, group = road_ID, size =1) +
#geom_path(aes(x = X, y = Y), data = coord_group, group = road_ID, size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
#geom_point(aes(x = X, y = Y), data = coord_group, group = road_ID, size =1) +
geom_path(aes(x = X, y = Y), data = coord_group,  size =2) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
#geom_point(aes(x = X, y = Y), data = coord_group, group = road_ID, size =1) +
geom_path(aes(x = X, y = Y), data = group_by(coord_group, road_ID),  size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
#geom_point(aes(x = X, y = Y), data = coord_group, group = road_ID, size =1) +
geom_path(aes(x = X, y = Y), data = coord_group$road_ID==3005060,  size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
#geom_point(aes(x = X, y = Y), data = coord_group, group = road_ID, size =1) +
geom_path(aes(x = X, y = Y), data = coord_group[coord_group$road_ID==3005060],  size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
#geom_point(aes(x = X, y = Y), data = coord_group, group = road_ID, size =1) +
geom_path(aes(x = X, y = Y), data = coord_group[coord_group$road_ID==3005060,],  size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point(aes(x = X, y = Y), data = coord_group,  size =1) +
#geom_path(aes(x = X, y = Y), data = coord_group[coord_group$road_ID==3005060,],  size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point(aes(x = X, y = Y), data = coord_group,  size =1, color = road_ID) +
#geom_path(aes(x = X, y = Y), data = coord_group[coord_group$road_ID==3005060,],  size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point(aes(x = X, y = Y), data = coord_group,  size =1, color = coord_group$road_ID) +
#geom_path(aes(x = X, y = Y), data = coord_group[coord_group$road_ID==3005060,],  size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
write.csv(coord_group,'cg.csv')
unique(coord_group$road_ID)
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point(aes(x = X, y = Y), data = coord_group[coord_group$road_ID==2209001,],  size =1, color = coord_group$road_ID) +
#geom_path(aes(x = X, y = Y), data = coord_group[coord_group$road_ID==3005060,],  size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
coord_group[coord_group$road_ID==2209001,]
map1 = SeoulMap +
#ggplot(aes(x = x, y = y), data = dongil, size =1) +
geom_point(aes(x = X, y = Y), data = coord_group,  size =1, color = coord_group$road_ID) +
#geom_path(aes(x = X, y = Y), data = coord_group[coord_group$road_ID==3005060,],  size =1) +
#geom_density2d(aes(x = y, y = x, alpha = 0), bins = 1, data = dongil) +
coord_equal()
map1
table(coord_group$road_ID)
setwd('d:/github/jupyter/BA')
if(!require(cluster)){install.packages('cluster')}
library(cluster)
if(!require(ggfortify)){install.packages('ggfortify')}
library(ggfortify)
if(!require(ggplot2)){install.packages('ggplot2')}
library(ggplot2)
#도시화_패키지 용량 큼
if(!require(factoextra)){install.packages('factoextra')}
library(factoextra)
library(FactoMineR)
data <- read.csv('data.csv', header=T, stringsAsFactors = F)
data <- data[,-c(8,9,10,11,12,13,14,15,22,23,24,25,26,27)]
rowname <- data[,1]
data <- data[,-1]
row.names(data) = rowname[]
data2 <- scale(data)
hc.single=hclust(dist(data2), method="single") # 단일연결 (최소 클러스터 간 비유사성)
hc.average=hclust(dist(data2), method="average")  # 평균연결 ( 평균 클러스터간 비유사성)
hc.complete=hclust(dist(data2), method="complete")# 완전연결 ( 최대 클러스터간 비유사성)
hc.ward=hclust(dist(data2), method="ward.D") # Ward (군집 내 유사성)
# 단일연결 클러스터 덴드로그램
plot(hc.single, main = 'Average linkage Clustering')
# 완전연결 클러스터 덴드로그램
plot(hc.complete, main = 'Complete linkage Clustering')
# 평균연결 클러스터 덴드로그램
plot(hc.average, main = 'Average linkage Clustering')
# Ward 클러스터링 덴드로그램
plot(hc.ward, main = 'Ward linkage Clustering')
# 덴드로그램 절단
x <- cutree(hc.complete, 4) # 완전연결 기준
table(x)
# kmeans
set.seed(1) # seed 조정 필요
kmeans1 <- kmeans(as.matrix(data2), centers = 4)
table(kmeans1$cluster) # 클러스터 수
autoplot(kmeans1, data = data2, label = TRUE, label.size = 4, frame = TRUE) # kmeans_autoplot
# k-means for Fviz Package
fviz_cluster(kmeans1, data = df,
palette = c("#00AFBB","#2E9FDF", "#E7B800", "#FC4E07"),
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot") #fviz_cluster이용 도시화
# MDS
mds = cmdscale(dist(data2), k = 4)
plot(mds, col = kmeans1$cluster) # MDS plot, 색상 kmeans clustering
## clustering plot
b = autoplot(pam(data2, 3), frame = TRUE, frame.type = 'norm') # Partitioning Around Medoids_겹침
b
library(data.table)
library(lattice)
## PCA
pca <- prcomp(data2, scale. = TRUE)
plot(pca, type='l')
summary(pca)
autoplot(pca, loadings = TRUE, loadings.label = TRUE, data = data2) #PCA_Auto plot
# 각 변수 상관관계
cor = cor(data2)
rgb.palette <- colorRampPalette(c("white", "blue"), space = "rgb")
levelplot(cor, main="Continous data of data correlation matrix", xlab="", ylab="", col.regions=rgb.palette(120), cuts=300, at=seq(-1,1,0.05))
#PCA 도시화_패키지 용량 큼
library(factoextra)
library(FactoMineR)
c <- pam(data2, 4)
fviz_cluster(c, frame.alpha = 0.1, frame.level = 0.2) # Partitioning Around Medoids_겹침
res.pca <- PCA(data2,  graph = FALSE)
get_eig(res.pca)
fviz_screeplot(res.pca, addlabels = TRUE, ylim = c(0, 50)) # PCA_Scree plot
var <- get_pca_var(res.pca)
# Coordinates of variables
head(var$coord) # 성분 별 변수 좌표
# Contribution of variables
head(var$contrib) #성분 별 변수 기여도
# Graph of variables: default plot
fviz_pca_var(res.pca, col.var = "black")
# Control variable colors using their contributions # 기여도에 따른 주성분 방향
fviz_pca_var(res.pca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
# Contributions of variables to PC1
fviz_contrib(res.pca, choice = "var", axes = 1, top = 10)
# Contributions of variables to PC2
fviz_contrib(res.pca, choice = "var", axes = 2, top = 10)
# Extract the results for individuals
ind <- get_pca_ind(res.pca)
ind
# Coordinates of individuals
head(ind$coord)
# Graph of individuals
# 1. Use repel = TRUE to avoid overplotting
# 2. Control automatically the color of individuals using the cos2
# cos2 = the quality of the individuals on the factor map
# Use points only
# 3. Use gradient color
fviz_pca_ind(res.pca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping (slow if many points)
)
# Biplot of individuals and variables_PCA 좌표계(정리)
fviz_pca_biplot(res.pca, repel = TRUE)
hc.single=hclust(dist(data2), method="single") # 단일연결 (최소 클러스터 간 비유사성)
hc.average=hclust(dist(data2), method="average")  # 평균연결 ( 평균 클러스터간 비유사성)
hc.complete=hclust(dist(data2), method="complete")# 완전연결 ( 최대 클러스터간 비유사성)
hc.ward=hclust(dist(data2), method="ward.D") # Ward (군집 내 유사성)
# 단일연결 클러스터 덴드로그램
plot(hc.single, main = 'Average linkage Clustering')
# 완전연결 클러스터 덴드로그램
plot(hc.complete, main = 'Complete linkage Clustering')
# 평균연결 클러스터 덴드로그램
plot(hc.average, main = 'Average linkage Clustering')
# Ward 클러스터링 덴드로그램
plot(hc.ward, main = 'Ward linkage Clustering')
# 덴드로그램 절단
x <- cutree(hc.complete, 4) # 완전연결 기준
table(x)
# kmeans
set.seed(1) # seed 조정 필요
kmeans1 <- kmeans(as.matrix(data2), centers = 4)
table(kmeans1$cluster) # 클러스터 수
autoplot(kmeans1, data = data2, label = TRUE, label.size = 4, frame = TRUE) # kmeans_autoplot
# k-means for Fviz Package
#fviz_cluster(kmeans1, data = df,
palette = c("#00AFBB","#2E9FDF", "#E7B800", "#FC4E07"),
