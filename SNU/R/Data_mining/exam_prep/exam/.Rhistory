knn_accuracy = c(knn_accuracy, sum(test_pred != ideo_test$ideo_self)/length(test_pred))
}
plot(knn_accuracy, type = 'b', pch = 19)
which(knn_accuracy == max(knn_accuracy))
1-knn_accuracy[2]
target_group = ideo_data[901:nrow(ideo_data),]
target_group_variables = target_group[,1:(ncol(target_group)-1)]
test_pred = knn(knn_train, target_group_variables, real_ideo, k = 2)
target_group$ideo_self = test_pred
target_group_profile = target_group[,c(ncol(target_group),1:5)]
target_group_profile
profile_summ = target_group %>% group_by(ideo_self) %>% tally()
profile_summ
which(knn_accuracy == max(knn_accuracy))
knn_accuracy[2]
Auto_train
train_mpg01
Auto_train$mpg01
a_list <- list(
c("a","b","c"),
c("a","b"),
c("a","b","d"),
c("c","e"),
c("a","b","d","e")
)
## set transaction names
names(a_list) <- paste("Tr",c(1:5), sep = "")
a_list
trans1 <- as(a_list, "transactions")
library(dplyr)
library(arulesViz)
install.packages('arulesViz'
)
library(dplyr)
library(arulesViz)
data("Groceries")
head(Groceries)
str(Groceries)
summary(Groceries)
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
a_list <- list(
c("a","b","c"),
c("a","b"),
c("a","b","d"),
c("c","e"),
c("a","b","d","e")
)
## set transaction names
names(a_list) <- paste("Tr",c(1:5), sep = "")
a_list
trans1 <- as(a_list, "transactions")
summary(trans1)
str(trans1)
image(trans1)
# matrix type
a_matrix <- matrix(c(
1,1,1,0,0,
1,1,0,0,0,
1,1,0,1,0,
0,0,1,0,1,
1,1,0,1,1
), ncol = 5)
# apriori algorithm
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
inspect(head(arules::sort(rules, by ="lift"),3))
plot(rules, method = NULL, measure = "support", shading = "lift")
plot(rules, measure=c("support", "lift"), shading="confidence")
# �쐎rder,�� i.e., the number of items contained in the rule
plot(rules, shading="order", control=list(main = "Two-key plot"))
sel <- plot(rules, measure=c("support", "lift"), shading="confidence", interactive=TRUE)
library(dplyr)
library(arulesViz)
data("Groceries")
head(Groceries)
str(Groceries)
summary(Groceries)
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
a_list <- list(
c("a","b","c"),
c("a","b"),
c("a","b","d"),
c("c","e"),
c("a","b","d","e")
)
## set transaction names
names(a_list) <- paste("Tr",c(1:5), sep = "")
a_list
trans1 <- as(a_list, "transactions")
summary(trans1)
str(trans1)
image(trans1)
# matrix type
a_matrix <- matrix(c(
1,1,1,0,0,
1,1,0,0,0,
1,1,0,1,0,
0,0,1,0,1,
1,1,0,1,1
), ncol = 5)
# apriori algorithm
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
inspect(head(arules::sort(rules, by ="lift"),3))
plot(rules, method = NULL, measure = "support", shading = "lift")
plot(rules, measure=c("support", "lift"), shading="confidence")
# �쐎rder,�� i.e., the number of items contained in the rule
plot(rules, shading="order", control=list(main = "Two-key plot"))
sel <- plot(rules, measure=c("support", "lift"), shading="confidence", interactive=TRUE)
# apriori algorithm
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
inspect(head(arules::sort(rules, by ="lift"),3))
plot(rules, method = NULL, measure = "support", shading = "lift")
plot(rules, measure=c("support", "lift"), shading="confidence")
# �쐎rder,�� i.e., the number of items contained in the rule
plot(rules, shading="order", control=list(main = "Two-key plot"))
sel <- plot(rules, measure=c("support", "lift"), shading="confidence", interactive=TRUE)
rules%>%quality()
subrules <- head(sort(rules, by="lift"), 10)
plot(subrules, method="graph",measure = 'lift',
shading = 'confidence')
install.packages('arulesViz')
# apriori algorithm
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
inspect(head(arules::sort(rules, by ="lift"),3))
plot(rules, method = NULL, measure = "support", shading = "lift")
plot(rules, measure=c("support", "lift"), shading="confidence")
# �쐎rder,�� i.e., the number of items contained in the rule
plot(rules, shading="order", control=list(main = "Two-key plot"))
#sel <- plot(rules, measure=c("support", "lift"), shading="confidence", interactive=TRUE)
rules%>%quality()
subrules <- head(sort(rules, by="lift"), 10)
plot(subrules, method="graph",measure = 'lift',
shading = 'confidence')
library(dplyr)
Auto = read.csv("Auto.csv",header=T,na.strings="?")
Auto = na.omit(Auto)
Auto = mutate(Auto, mpg01 = 0)
Auto$mpg01[Auto$mpg > median(Auto$mpg)] = 1
table(Auto$mpg01)
Auto_train = Auto[Auto$year%%2 == 0, ]
Auto_test = Auto[Auto$year%%2 == 1, ]
mpg01_test = Auto_test$mpg01
library(MASS)
lda_fit = lda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto_train)
lda_pred = predict(lda_fit, Auto_test)
mean(lda_pred$class != mpg01_test)
qda_fit = qda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto_train)
qda_pred = predict(qda_fit, Auto_test)
table('prediction' = qda_pred$class, 'actual value' = mpg01_test)
mean(qda_pred$class != mpg01_test)
glm_fit = glm(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto_train, family = binomial)
glm_probs = predict(glm_fit, Auto_test, type = "response")
glm_pred = rep(0, length(glm_probs))
glm_pred[glm_probs > 0.5] = 1
table('prediction' = glm_pred, 'actual value' = Auto_test$mpg01)
mean(glm_pred != mpg01_test)
library(class)
train_x = Auto_train[,c(2,5, 3, 4)]
train_mpg01 = Auto_train$mpg01
test_x = Auto_test[,c(2,5, 3, 4)]
set.seed(1)
knn_pred = knn(train_x, test_x, train_mpg01, k = 1)
mean(knn_pred != mpg01_test)
knn_pred = knn(train_x, test_x, train_mpg01, k = 10)
mean(knn_pred != mpg01_test)
knn_pred = knn(train_x, test_x, train_mpg01, k = 100)
mean(knn_pred != mpg01_test)
library(xlsx)
ideo_data = read.xlsx2('data1.xlsx',1, startRow = 2, header = T, stringsAsFactors = F)
# 자료 정수화
for (i in 1:ncol(ideo_data)){
ideo_data[,i] = as.integer(ideo_data[,i])
}
# k3 변수 [1,2]에서 [0,1]로 수정
ideo_data$k3 = ideo_data$k3-1
# NA 대신 '9'라는 factor 추가
ideo_data[is.na(ideo_data)] = 9
# age 변수 제외하고 factor화
for (i in c(1:4,6:ncol(ideo_data))){
ideo_data[,i] = as.factor(ideo_data[,i])
}
# 다음 변수 삭제 [x.(행번호), id, birth(나이 변수와 중복), age(age1이 실제 나이)]
ideo_data = ideo_data[,c(-1, -2 ,-4, -6)]
head(ideo_data,5)
set.seed(1234)
train_set = sample(1:900,600)
ideo_train = na.omit(ideo_data[train_set,])
ideo_test = na.omit(ideo_data[!1:900%in%train_set,])
knn_train = ideo_train[,1:(ncol(ideo_train)-1)]
knn_test = ideo_test[,1:(ncol(ideo_train)-1)]
real_ideo = ideo_train[,ncol(ideo_train)]
knn_accuracy = NULL
for (i in (1:nrow(knn_test))){
test_pred = knn(knn_train, knn_test, real_ideo, k = i)
knn_accuracy = c(knn_accuracy, sum(test_pred != ideo_test$ideo_self)/length(test_pred))
}
plot(knn_accuracy, type = 'b', pch = 19)
which(knn_accuracy == max(knn_accuracy))
knn_accuracy[2]
target_group = ideo_data[901:nrow(ideo_data),]
target_group_variables = target_group[,1:(ncol(target_group)-1)]
test_pred = knn(knn_train, target_group_variables, real_ideo, k = 2)
target_group$ideo_self = test_pred
target_group_profile = target_group[,c(ncol(target_group),1:5)]
profile_summ = target_group %>% group_by(ideo_self) %>% tally()
profile_summ
library(ggplot2)
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette='oranges')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette='Oranges') +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette='blues') +
coord_polar(theta = 'y')
library("RColorBrewer", lib.loc="D:/Program Files/R/R-3.4.1/library")
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette=brewer.pal(11,'Set1')) +
coord_polar(theta = 'y')
brewer.pal(11,'Set1')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette=brewer.pal(11,'Paired')) +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(brewer.pal(11,'Paired')) +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette='Paired') +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette='Pastel1') +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(values = colorRampPalette(brewer.pal(11, "Accent"))) +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(values = colorRampPalette(brewer.pal(11, "Accent"))(11)) +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(brewer.pal(11, "Accent"))) +
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(brewer.pal(11, "Accent")) +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(brewer.pal(11, "Set1")) +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette = brewer.pal(11, "BrBG")) +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette = "BrBG") +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer(palette = "Spectral") +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_brewer() +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
scale_fill_manual(values = brewer.pal(11, "Spectral") +
coord_polar(theta = 'y')
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
coord_polar(theta = 'y') +
scale_fill_manual(values = brewer.pal(11, "Spectral"))
display.brewer.all()
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
coord_polar(theta = 'y') +
scale_fill_manual(values = brewer.pal(11, "Paired"))
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
coord_polar(theta = 'y') +
scale_fill_manual(values = rev(brewer.pal(11, "RdBr")))
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
coord_polar(theta = 'y') +
scale_fill_manual(values = rev(brewer.pal(11, "RdBu")))
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
coord_polar(theta = 'y') +
scale_fill_manual(values = rev(brewer.pal(11, "RdYlBu")))
library(networkD3)
install.packages('networkD3')
install.packages('circlize')
library(networkD3)
src <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
networkData <- data.frame(src, target)
networkD3::simpleNetwork(networkData, fontSize = 15, zoom = T)
data(MisLinks)
head(MisLinks)
data(MisNodes)
head(MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source", Target = "target", Value = "value", NodeID = "name", Group = "group", opacity = 0.8, zoom = TRUE)
sankeyNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 18)
##ChordDiagram
library(circlize)
name=c(3,10,10,3,6,7,8,3,6,1,2,2,6,10,2,3,3,10,4,5,9,10)
feature=paste("feature ", c(1,1,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5),
sep="")
dat <- data.frame(name,feature)
dat <- table(name, feature)
dat
chordDiagram(as.data.frame(dat), transparency = 0.5)
networkData
data(MisLinks)
head(MisLinks)
library(networkD3)
src <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
networkData <- data.frame(src, target)
networkData
networkD3::simpleNetwork(networkData, fontSize = 15, zoom = T)
data(MisLinks)
head(MisLinks)
data(MisNodes)
head(MisNodes)
forceNetwork(Links = MisLinks, Nodes = MisNodes, Source = "source", Target = "target", Value = "value", NodeID = "name", Group = "group", opacity = 0.8, zoom = TRUE)
sankeyNetwork(Links = MisLinks, Nodes = MisNodes,
Source = "source", Target = "target",
Value = "value", NodeID = "name",
fontSize = 12, nodeWidth = 18)
##ChordDiagram
library(circlize)
name=c(3,10,10,3,6,7,8,3,6,1,2,2,6,10,2,3,3,10,4,5,9,10)
feature=paste("feature ", c(1,1,2,2,2,2,2,3,3,3,3,3,3,3,4,4,4,4,5,5,5,5),
sep="")
dat <- data.frame(name,feature)
dat <- table(name, feature)
dat
chordDiagram(as.data.frame(dat), transparency = 0.5)
dat
# apriori algorithm
rules <- apriori(Groceries, parameter=list(support=0.001, confidence=0.5))
inspect(head(arules::sort(rules, by ="lift"),3))
plot(rules, method = NULL, measure = "support", shading = "lift")
plot(rules, measure=c("support", "lift"), shading="confidence")
# �쐎rder,�� i.e., the number of items contained in the rule
plot(rules, shading="order", control=list(main = "Two-key plot"))
sel <- plot(rules, measure=c("support", "lift"), shading="confidence", interactive=TRUE)
rules
politicians = read.xlsx2('data2.xlsx',2)
getwd()
setwd('D:/Github/R/Data_mining/exam_prep/exam')
politicians = read.xlsx2('data2.xlsx',2)
getwd()
setwd('D:/Github/R/Data_mining/exam_prep/exam')
politicians = read.xlsx2('data2.xlsx',2)
politicians
legislation = read.xlsx2('data2.xlsx',1)
legislation
plot(legislation)
training = scale(legislation)
legislation = read.xlsx2('data2.xlsx',1, stringsAsFactors = F)
legislation
as.numeric(legislation)
for (i in 1:ncol(legislation)){}
for (i in 1:ncol(legislation)){
legislation[,i] = as.numeric(legislation[,i])
}
legislation
training = scale(legislation)
training
summary(training)
training[,-5]
legislation.kmeans &lt;- kmeans(training[,-5], centers = 3, iter.max = 10000)
kmeans(training[,-5], centers = 3, iter.max = 10000)
legislation_kmeans =kmeans(training[,-5], centers = 3, iter.max = 10000)
legislation_kmeans$centers
qplot(legislation)
legislation_kmeans$cluster
as.factor(legislation_kmeans$cluster)
training
training$cluster
training$cluster<-as.factor(legislation_kmeans$cluster)
training$cluster
ggplot(training$cluster, aes(x=factor(1), fill = cluster)) +
geom_bar(width = 1) +
coord_polar(theta = 'y') +
scale_fill_manual(values = rev(brewer.pal(11, "RdYlBu")))
ggplot(training$cluster, ) +
geom_bar(width = 1) +
ggplot(training$cluster) +
geom_bar(width = 1) +
ggplot(training$cluster) +
geom_bar(width = 1)
ggplot(training$cluster) +
geom_bar(width = 1)
plot(training$cluster)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(training)
install.packages('NbClust')
library(NbClust)
nc <- NbClust(training.data, min.nc=2, max.nc=15, method="kmeans")
library(NbClust)
nc <- NbClust(training, min.nc=2, max.nc=15, method="kmeans")
str(training)
apply(training,2,var))
apply(training,2,var)
dim(training)
training = scale(legislation)
dim(training)
apply(training,2,var)
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
wssplot(training)
library(NbClust)
nc <- NbClust(training, min.nc=2, max.nc=15, method="kmeans")
dim(training)
nc <- NbClust(training, min.nc=2, max.nc=15, method="kmeans")
training
legislation_kmeans = kmeans(legislation, centers = 3, iter.max = 10000)
legislation_kmeans$centers
legislation$cluster<-as.factor(legislation_kmeans$cluster)
legislation$cluster
training$cluster
wssplot(legislation)
dim(legislation)
legislation
legislation$cluster
legislation[,ncol(legislation)]
wssplot(legislation[,-ncol(legislation)])
str(legislation_kmeans)
politicians = read.xlsx2('data2.xlsx',2)
legislation = read.xlsx2('data2.xlsx',1, stringsAsFactors = F)
for (i in 1:ncol(legislation)){
legislation[,i] = as.numeric(legislation[,i])
}
legislation_kmeans = kmeans(legislation, centers = 3, iter.max = 10000)
kmeans_cluster = legislation_kmeans$cluster
legislation_kmeans = kmeans(legislation, centers = 3, iter.max = 10000)
kmeans_cluster = legislation_kmeans$cluster
kmeans_cluster
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
# ref. http://www.dodomira.com/2016/02/20/r%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-k-means-%EA%B5%B0%EC%A7%91%EB%B6%84%EC%84%9D-k-means-clustering-in-r/
wssplot(legislation)
legislation_kmeans = kmeans(legislation, centers = 6, iter.max = 10000)
kmeans_cluster = legislation_kmeans$cluster
kmeans_cluster
politicians
cbind(politicians, kmeans_cluster)
cbind(politicians,  'clustered' = kmeans_cluster)
politicians = cbind(politicians,  'clustered' = kmeans_cluster)
table(politicians)
table(politicians[,2:3])
ggplot(politicians[,2:3]+ aes(x = clustered, y = party)) + geom_bar()
ggplot(politicians[,2:3] + aes(x = clustered, fill = party)) + geom_bar()
ggplot(politicians[,2:3], aes(x = clustered, fill = party)) + geom_bar()
ggplot(politicians[,2:3], aes(x = clustered, fill = party)) + geom_bar() + coord_polar(theta = 'y') +
scale_fill_manual(values = rev(brewer.pal(11, "RdYlBu")))
ggplot(politicians[,2:3], aes(x = clustered, fill = party)) + geom_bar() + coord_polar(theta = 'y')
ggplot(politicians[,2:3], aes(x = clustered, fill = party)) + geom_bar() + coord_polar(theta = 'x')
ggplot(politicians[,2:3], aes(x = clustered, fill = party)) + geom_bar()
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar()
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar()
politicians
kmeans_cluster = as.factor(legislation_kmeans$cluster)
kmeans_cluster
politicians = cbind(politicians,  'clustered' = kmeans_cluster)
politicians
politicians = politicians[,c(1,2,4)]
politicians
table(politicians[,2:3])
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar()
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar() + scale_fill_manual(values = rev(brewer.pal(6, "Pastel")))
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar() + scale_fill_brewer(palette = 'Pastel')
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar() + scale_fill_brewer(palette = 'Pastel1')
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar() + scale_fill_brewer(palette = 'Pastel2')
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar() + scale_fill_brewer(palette = 'Paired')
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar() + scale_fill_brewer(palette = 'Dark2')
