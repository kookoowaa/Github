ggplot(data = sales, aes(x = quality, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(quality)) +
ggtitle("Correlation: \n log(Sales) vs. quality") +
xlab("log(Price)") + ylab('quality')
ggplot(data = sales, aes(x = dummy1, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(dummy1)) +
ggtitle("Correlation: \n log(Sales) vs. yellow product") +
xlab("log(Price)") + ylab('yellow product')
ggplot(data = sales, aes(x = dummy2, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(dummy2)) +
ggtitle("Correlation: \n log(Sales) vs. green product") +
xlab("log(Price)") + ylab('green product')
summary(lm(logQ~., data = sales))
summary(lm(logQ~.-quality, data = sales))
# Simulate a data set for regression illustratoin
# true model logQ is funciton of logP, dummy1, dummy2,  a quality
set.seed(70112)
####
#### data generation
####
n = 5000  # number of observation
trueB = c(3,-3, 1.5, 0.7, 3)
err = rnorm(n,sd=3)  # error term simulation
u1 = runif(n)
u2 = runif(n)
u3 = runif(n)
u4 = runif(n)
logPr = u1 +  u2
quality = u3 + u2
dummy1 = (u4> 0.7)*1.0
dummy2 = ((u4<0.7)&(u4>0.3))*1.0
logQ= trueB[1] + trueB[2]*logPr + trueB[3]*dummy1 + trueB[4]*dummy2 + trueB[5]*quality + err
summary(cbind(logQ,logPr, dummy1, dummy2,quality))
# Simulate a data set for regression illustratoin
# true model logQ is funciton of logP, dummy1, dummy2,  a quality
set.seed(70112)
####
#### data generation
####
n = 5000  # number of observation
trueB = c(3,-3, 1.5, 0.7, 3)
err = rnorm(n,sd=3)  # error term simulation
u1 = runif(n)
u2 = runif(n)
u3 = runif(n)
u4 = runif(n)
logPr = u1 +  u2
quality = u3 + u2
dummy1 = (u4> 0.7)*1.0
dummy2 = ((u4<0.7)&(u4>0.3))*1.0
logQ= trueB[1] + trueB[2]*logPr + trueB[3]*dummy1 + trueB[4]*dummy2 + trueB[5]*quality + err
summary(cbind(logQ,logPr, dummy1, dummy2,quality))
library(ggplot2)
sales = data.frame(logQ, logPr, quality, dummy1, dummy2)
ggplot(data = sales, aes(x = logPr, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(logPr)) +
ggtitle("Correlation: \n log(Sales) vs. log(Price)") +
xlab("log(Price)") + ylab('log(Sales)')
ggplot(data = sales, aes(x = quality, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(quality)) +
ggtitle("Correlation: \n log(Sales) vs. quality") +
xlab("log(Price)") + ylab('quality')
ggplot(data = sales, aes(x = dummy1, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(dummy1)) +
ggtitle("Correlation: \n log(Sales) vs. yellow product") +
xlab("log(Price)") + ylab('yellow product')
ggplot(data = sales, aes(x = dummy2, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(dummy2)) +
ggtitle("Correlation: \n log(Sales) vs. green product") +
xlab("log(Price)") + ylab('green product')
summary(lm(logQ~., data = sales))
summary(lm(logQ~.-quality, data = sales))
quality_modified = u3
logQ_modified = trueB[1] + trueB[2]*logPr + trueB[3]*dummy1 + trueB[4]*dummy2 + trueB[5]*quality_modified + err
sales_modified = cbind(logQ_modified, sales[,c(-1, -3)], quality_modified)
summary(lm(logQ_modified~., data = sales_modified))
summary(lm(logQ_modified~.-quality_modified, data = sales_modified))
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(round(colMeans(rsc_cereals[group==i,]), 3),
round(diag(cov(rsc_cereals[group==i,])), 3))
rownames(tmp) = c('Mean', 'Var')
print(tmp)
}
cereals = read.csv('D:/Github/R/Business_analytics/cereals.csv')
head(cereals)
cereals = cereals[,c('name', 'calories', 'protein', 'fat', 'sodium', 'fiber', 'carbo', 'sugars', 'potass', 'vitamins')]
head(cereals)
dim(cereals)
cereals[complete.cases(cereals),]
### 결측치 제거
cereals = cereals[complete.cases(cereals),]
dim(cereals)
var_cereals = cereals[,-1]
row.names(var_cereals) = cereals[,1]
var_cereals
summary(var_cereals)
### 표준화
rsc_cereals = sapply(1:ncol(var_cereals), function(i) var_cereals[,i]/sd(var_cereals[,i]))
rsc_cereals = data.frame(rsc_cereals)
colnames(rsc_cereals) = colnames(var_cereals)
rownames(rsc_cereals) = rownames(var_cereals)
rsc_cereals
plot(rsc_cereals)
dist.E = dist(rsc_cereals)
cluster.EC = hclust(dist.E)
cluster.EC
plot(cluster.EC, hang = -1, cex=0.5)
rect.hclust(cluster.EC, k =3, border = 'red')
ec.group = cutree(cluster.EC, k = 3:6)
head(ec.group)
library(ggdendro)
ggdendrogram(cluster.EC)
cluster.EA = hclust(dist.E, method = 'average')
cluster.ES = hclust(dist.E, method = 'single')
EC.group = cutree(cluster.EC, k = 4)
EA.group = cutree(cluster.EA, k = 4)
ES.group = cutree(cluster.ES, k = 4)
table(EC.group, EA.group)
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(round(colMeans(rsc_cereals[group==i,]), 3),
round(diag(cov(rsc_cereals[group==i,])), 3))
rownames(tmp) = c('Mean', 'Var')
print(tmp)
}
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(round(colMeans(rsc_cereals[EC.group==i,]), 3),
round(diag(cov(rsc_cereals[EC.group==i,])), 3))
rownames(tmp) = c('Mean', 'Var')
print(tmp)
}
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(round(colMeans(rsc_cereals[EC.group==i,]), 3),
round(diag(cov(rsc_cereals[EC.group==i,])), 3))
rownames(tmp) = c('Mean', 'Var')
cat('\n')
print(tmp)
}
tmp
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(round(colMeans(rsc_cereals[EC.group==i,]), 3),
round(diag(cov(rsc_cereals[EC.group==i,])), 3))
rownames(tmp) = c('Mean', 'Var')
cat(tmp, '\n')
}
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(round(colMeans(rsc_cereals[EC.group==i,]), 3),
round(diag(cov(rsc_cereals[EC.group==i,])), 3))
rownames(tmp) = c('Mean', 'Var')
print(tmp, '\n')
}
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(round(colMeans(rsc_cereals[EC.group==i,]), 3),
round(diag(cov(rsc_cereals[EC.group==i,])), 3))
rownames(tmp) = c('Mean', 'Var')
print(tmp)
print()
}
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(round(colMeans(rsc_cereals[EC.group==i,]), 3),
round(diag(cov(rsc_cereals[EC.group==i,])), 3))
rownames(tmp) = c('Mean', 'Var')
print(tmp)
print('\n')
}
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(round(colMeans(rsc_cereals[EC.group==i,]), 3),
round(diag(cov(rsc_cereals[EC.group==i,])), 3))
rownames(tmp) = c('Mean', 'Var')
print(tmp)
cat('\n')
}
cov(rsc_cereals[EC.group==i,]
rsc_cereals[EC.group==1,]
rsc_cereals[EC.group==1,]
EC.group==1
cov(rsc_cereals[EC.group==1,])
diag(cov(rsc_cereals[EC.group==1,]))
cov(rsc_cereals[EC.group==1,])
for (i in 1:4){
cat('cluster -', i,'\n')
tmp = rbind(colMeans(rsc_cereals[EC.group==i,]),
diag(cov(rsc_cereals[EC.group==i,])))
rownames(tmp) = c('Mean', 'Var')
print(tmp)
cat('\n')
}
diag(c(1,2,3,4))
diag(diag(c(1,2,3,4)))
cov(rsc_cereals[EC.group==1,])
diag(cov(rsc_cereals[EC.group==1,]))
rsc_cereals[EC.group==1,]
cov(rsc_cereals[EC.group==1,])
diag(cov(rsc_cereals[EC.group==1,]))
gc()
rsc_cereals = sapply(1:ncol(var_cereals), function(i) var_cereals[,i]/sd(var_cereals[,i]))
cereals = read.csv('D:/Github/R/Business_analytics/cereals.csv')
cereals = cereals[,c('name', 'calories', 'protein', 'fat', 'sodium', 'fiber', 'carbo', 'sugars', 'potass', 'vitamins')]
cereals = cereals[complete.cases(cereals),]
var_cereals = cereals[,-1]
row.names(var_cereals) = cereals[,1]
rsc_cereals = sapply(1:ncol(var_cereals), function(i) var_cereals[,i]/sd(var_cereals[,i]))
rsc_cereals = data.frame(rsc_cereals)
colnames(rsc_cereals) = colnames(var_cereals)
rownames(rsc_cereals) = rownames(var_cereals)
rsc_cereals
library(cluster)
cluster.K4 = kmeans(rsc_cereals, centers = 4)
cluster.K4
plot(rsc_cereals, col=cluster.K4$cluster)
plot(rsc_cereals, col=cluster.K4$cluster+1)
plot(rsc_cereals, col=cluster.K4$cluster)
set.seed(1)
cluster1 = kmeans(rsc_cereals, centers = 4)
set.seed(2)
cluster2 = kmeans(rsc_cereals, centers = 4)
table(cluster1$cluster, cluster2$cluster)
wss = []
wss = list()
plot(wss)
wss = list()
for (i in 1:15){
wss[i] = kmeans(rsc_cereals, centers = i, nstart =10)$tot.withinss
}
plot(wss)
plot(1:15, wss)
wss
wss = list()
for (i in 1:15){
wss[i] = kmeans(rsc_cereals, centers = i, nstart =10)$tot.withinss[1]
}
plot(1:15, wss)
wss
wss = list()
for (i in 1:15){
wss[i] = kmeans(rsc_cereals, centers = i, nstart =10)$tot.withinss[[1]
}
wss = list()
for (i in 1:15){
wss[i] = kmeans(rsc_cereals, centers = i, nstart =10)$tot.withinss[[1]]
}
plot(1:15, wss)
wss
wss = list()
for (i in 1:15){
wss[i] = kmeans(rsc_cereals, centers = i, nstart =10)$tot.withinss[[1]]
}
plot(1:15, wss)
wss
wss
cluster.K4$tot.withinss
wss = c()
for (i in 1:15){
wss[i] = kmeans(rsc_cereals, centers = i, nstart =10)$tot.withinss[[1]]
}
plot(wss)
wss
library(dplyr)
Auto = read.csv("Auto.csv",header=T,na.strings="?")
Auto = na.omit(Auto)
Auto = mutate(Auto, mpg01 = 0)
Auto$mpg01[Auto$mpg > median(Auto$mpg)] = 1
table(Auto$mpg01)
Auto_train = Auto[Auto$year%%2 == 0, ]
Auto_test = Auto[Auto$year%%2 == 1, ]
mpg01_test = Auto_test$mpg01
library(MASS)
lda_fit = lda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto_train)
lda_pred = predict(lda_fit, Auto_test)
mean(lda_pred$class != mpg01_test)
qda_fit = qda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto_train)
qda_pred = predict(qda_fit, Auto_test)
table('prediction' = qda_pred$class, 'actual value' = mpg01_test)
mean(qda_pred$class != mpg01_test)
glm_fit = glm(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto_train, family = binomial)
glm_probs = predict(glm_fit, Auto_test, type = "response")
glm_pred = rep(0, length(glm_probs))
glm_pred[glm_probs > 0.5] = 1
table('prediction' = glm_pred, 'actual value' = Auto_test$mpg01)
mean(glm_pred != mpg01_test)
library(class)
train_x = Auto_train[,c(2,5, 3, 4)]
train_mpg01 = Auto_train$mpg01
test_x = Auto_test[,c(2,5, 3, 4)]
set.seed(1)
knn_pred = knn(train_x, test_x, train_mpg01, k = 1)
mean(knn_pred != mpg01_test)
knn_pred = knn(train_x, test_x, train_mpg01, k = 10)
mean(knn_pred != mpg01_test)
knn_pred = knn(train_x, test_x, train_mpg01, k = 100)
mean(knn_pred != mpg01_test)
library(xlsx)
ideo_data = read.xlsx2('data1.xlsx',1, startRow = 2, header = T, stringsAsFactors = F)
# 자료 정수화
for (i in 1:ncol(ideo_data)){
ideo_data[,i] = as.integer(ideo_data[,i])
}
# k3 변수 [1,2]에서 [0,1]로 수정
ideo_data$k3 = ideo_data$k3-1
# NA 대신 '9'라는 factor 추가
ideo_data[is.na(ideo_data)] = 9
# age 변수 제외하고 factor화
for (i in c(1:4,6:ncol(ideo_data))){
ideo_data[,i] = as.factor(ideo_data[,i])
}
# 다음 변수 삭제 [x.(행번호), id, birth(나이 변수와 중복), age(age1이 실제 나이)]
ideo_data = ideo_data[,c(-1, -2 ,-4, -6)]
head(ideo_data,5)
set.seed(1234)
train_set = sample(1:900,600)
ideo_train = na.omit(ideo_data[train_set,])
ideo_test = na.omit(ideo_data[!1:900%in%train_set,])
knn_train = ideo_train[,1:(ncol(ideo_train)-1)]
knn_test = ideo_test[,1:(ncol(ideo_train)-1)]
real_ideo = ideo_train[,ncol(ideo_train)]
knn_accuracy = NULL
for (i in (1:nrow(knn_test))){
test_pred = knn(knn_train, knn_test, real_ideo, k = i)
knn_accuracy = c(knn_accuracy, sum(test_pred != ideo_test$ideo_self)/length(test_pred))
}
plot(knn_accuracy, type = 'b', pch = 19)
which(knn_accuracy == max(knn_accuracy))
knn_accuracy[2]
target_group = ideo_data[901:nrow(ideo_data),]
target_group_variables = target_group[,1:(ncol(target_group)-1)]
test_pred = knn(knn_train, target_group_variables, real_ideo, k = 2)
target_group$ideo_self = test_pred
target_group_profile = target_group[,c(ncol(target_group),1:5)]
profile_summ = target_group %>% group_by(ideo_self) %>% tally()
profile_summ
library(ggplot2)
library(RColorBrewer)
ggplot(target_group_profile, aes(x=factor(1), fill = ideo_self)) +
geom_bar(width = 1) +
coord_polar(theta = 'y') +
scale_fill_manual(values = rev(brewer.pal(11, "RdYlBu")))
politicians = read.xlsx2('data2.xlsx',2)
legislation = read.xlsx2('data2.xlsx',1, stringsAsFactors = F)
for (i in 1:ncol(legislation)){
legislation[,i] = as.numeric(legislation[,i])
}
legislation_kmeans = kmeans(legislation, centers = 3, iter.max = 10000)
kmeans_cluster = legislation_kmeans$cluster
kmeans_cluster
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, pch = 19, type="b", xlab="Number of Clusters", ylab="Sum of squares")}
# ref. http://www.dodomira.com/2016/02/20/r%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-k-means-%EA%B5%B0%EC%A7%91%EB%B6%84%EC%84%9D-k-means-clustering-in-r/
wssplot(legislation)
legislation_kmeans = kmeans(legislation, centers = 6, iter.max = 10000)
kmeans_cluster = as.factor(legislation_kmeans$cluster)
politicians = cbind(politicians,  'clustered' = kmeans_cluster)
head(politicians)
table(politicians[,2:3])
ggplot(politicians[,2:3], aes(x = party, fill = clustered)) + geom_bar() + scale_fill_brewer(palette = 'Dark2')
plot(wss, lty = 'b')
plot(wss, pty = 'b')
plot(wss, type = 'b')
plot(wss, type = 'b', ylab = 'accuracy(lower the better)', xlab = 'number of k', main = 'K vs accuracy')
plot(wss, pch = 9, type = 'b', ylab = 'accuracy(lower the better)', xlab = 'number of k', main = 'K vs accuracy')
plot(wss, pch = 19, type = 'b', ylab = 'accuracy(lower the better)', xlab = 'number of k', main = 'K vs accuracy')
accuracy = rbind(1:15, wss)
accuracy
colnames(wss) = 1:15
as.table(wss)
as.data.frame(wss)
as.matrix(wss)
t(as.matrix(wss))
cereals = read.csv('D:/Github/R/Business_analytics/cereals.csv')
cereals = cereals[,c('name', 'calories', 'protein', 'fat', 'sodium', 'fiber', 'carbo', 'sugars', 'potass', 'vitamins')]
cereals = cereals[complete.cases(cereals),]
var_cereals = cereals[,-1]
row.names(var_cereals) = cereals[,1]
rsc_cereals = sapply(1:ncol(var_cereals), function(i) var_cereals[,i]/sd(var_cereals[,i]))
rsc_cereals = data.frame(rsc_cereals)
colnames(rsc_cereals) = colnames(var_cereals)
rownames(rsc_cereals) = rownames(var_cereals)
rsc_cereals
dist.E = dist(rsc_cereals)
dist.E
head(dist.E)
summary(dist.E)
cmds = cmdscale(dist.E, k=2)
cmds
head(cmds)
plot(cmds)
plot(cmds, type = n)
plot(cmds, type = 'n')
text(cmds)
plot(cmds, type = 'n')
text(cmds, labels = rownames(cmds))
plot(cmds, type = 'n')
text(cmds, labels = rownames(cmds), cex = 0.5)
cluster.EC = hclust(dist.E)
cluster.EA = hclust(dist.E, method = 'average')
cluster.ES = hclust(dist.E, method = 'single')
EC.group = cutree(cluster.EC, k = 4)
EA.group = cutree(cluster.EA, k = 4)
ES.group = cutree(cluster.ES, k = 4)
plot(cmds, type = 'n')
text(cmds, labels = rownames(cmds), cex = 0.5, col = EC.group)
plot(cmds, type = 'n', main = 'MDS complete 4-groups')
text(cmds, labels = rownames(cmds), cex = 0.5, col = EC.group)
KM.group = kmeans(rsc_cereals, centers = 4)$group
kmeans(rsc_cereals, centers = 4)
KM.group = kmeans(rsc_cereals, centers = 4)$cluster
KM.group
plot(cmds, type = 'n', main = 'MDS complete 4-groups')
text(cmds, labels = rownames(cmds), cex = 0.5, col = EC.group)
plot(cmds, type = 'n', main = 'MDS k-means 4-groups')
text(cmds, labels = rownames(cmds), cex = 0.5, col = KM.group)
plot(cmds, type = 'n', main = 'MDS complete 4-groups')
text(cmds, labels = rownames(cmds), cex = 0.5, col = EC.group)
plot(cmds, type = 'n', main = 'MDS k-means 4-groups')
text(cmds, labels = rownames(cmds), cex = 0.5, col = KM.group)
plot(cmds, type = 'n', main = 'MDS single 4-groups')
text(cmds, labels = rownames(cmds), cex = 0.5, col = ES.group)
plot(cmds, type = 'n', main = 'MDS average 4-groups')
text(cmds, labels = rownames(cmds), cex = 0.5, col = EA.group)
set.seed(70112)
n = 5000  # number of observation
trueB = c(3,-3, 1.5, 0.7, 3)
err = rnorm(n,sd=3)  # error term simulation
u1 = runif(n)
u2 = runif(n)
u3 = runif(n)
u4 = runif(n)
logPr = u1 +  u2
quality = u3 + u2
dummy1 = (u4> 0.7)*1.0
dummy2 = ((u4<0.7)&(u4>0.3))*1.0
logQ= trueB[1] + trueB[2]*logPr + trueB[3]*dummy1 + trueB[4]*dummy2 + trueB[5]*quality + err
sales = data.frame(logQ, logPr, quality, dummy1, dummy2)
sales
corrout = cor(cbind(logQ,logPr, dummy1, dummy2,quality))
print(round(corrout,digits=4))
set.seed(70112)
n = 5000  # number of observation
trueB = c(3,-3, 3, 1.5, 0.7)
err = rnorm(n,sd=3)  # error term simulation
u1 = runif(n)
u2 = runif(n)
u3 = runif(n)
u4 = runif(n)
logPr = u1 +  u2
quality = u3 + u2
dummy1 = (u4> 0.7)*1.0
dummy2 = ((u4<0.7)&(u4>0.3))*1.0
logQ= trueB[1] + trueB[2]*logPr + trueB[3]*quality + trueB[4]*dummy1 + trueB[5]*dummy2 + err
sales = data.frame(logQ, logPr, quality, dummy1, dummy2)
head(sales)
library(ggplot2)
ggplot(data = sales, aes(x = logPr, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(logPr)) +
ggtitle("Correlation: \n log(Sales) vs. log(Price)") +
xlab("log(Price)") + ylab('log(Sales)')
ggplot(data = sales, aes(x = quality, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(quality)) +
ggtitle("Correlation: \n log(Sales) vs. quality") +
xlab("quality") + ylab('log(Sales)')
ggplot(data = sales, aes(x = dummy1, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(dummy1)) +
ggtitle("Correlation: \n log(Sales) vs. yellow product") +
xlab("yellow product") + ylab('log(Sales)')
ggplot(data = sales, aes(x = dummy2, y = logQ))+
geom_point(col = 'dark blue') +
geom_hline(yintercept = mean(logQ)) +
geom_vline(xintercept = mean(dummy2)) +
ggtitle("Correlation: \n log(Sales) vs. green product") +
xlab("green product") + ylab('log(Sales)')
ggplot(data = sales, aes(x = logPr, y = quality))+
geom_point(col = 'dark blue') +
ggtitle("Correlation: \n log(Price) vs. quality") +
xlab("log(Price)") + ylab('quality')
summary(lm(logQ~., data = sales))
summary(lm(logQ~.-quality, data = sales))
quality_modified = u3
logQ_modified = trueB[1] + trueB[2]*logPr + trueB[3]*quality_modified + trueB[4]*dummy1 + trueB[5]*dummy2 + err
sales_modified = cbind(logQ_modified, quality_modified, sales[,c(-1, -3)])
summary(lm(logQ_modified~., data = sales_modified))
summary(lm(logQ_modified~.-quality_modified, data = sales_modified))
